
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'javaleftPLUSMINUSleftTIMESDIVIDEMODrightEQUALSleftORleftANDleftNEEQleftGTLTGELErightNEWNOTleftPERIODABSTRACT AND ASSERT BOOLEAN BOOLEAN BREAK BYTE CASE CATCH CHAR CLASS COLON COMMA CONST CONTINUE D DEFAULT DIVIDE DOUBLE DOUBLE ELSE ENUM EQ EQUALS EXTENDS FINAL FINALLY FOR GE GOTO GT IDENTIFIER IF IMPLEMENTS IMPORT INSTANCEOF INT INTERFACE LBRACE LBRACKET LE LPAREN LPAREN LT MINUS MINUSEQUAL MINUSMINUS MOD NATIVE NE NEW NOT OR OUT PACKAGE PERIOD PLUS PLUSEQUAL PLUSPLUS PRINTLN PRIVATE PROTECTED PUBLIC RBRACE RBRACKET RETURN RPAREN RPAREN SEMI STATIC STRICTFP STRING SUPER SWITCH SYNCHRONIZED SYSTEM THIS THROW THROWS TIMES TRANSIENT VOID VOLATILE WHILEjava : element javajava : element : PUBLIC CLASS IDENTIFIER compoundelemcompoundelem : LBRACE elements RBRACEelements : element elementselements : element : statementelement : PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmtelement : PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmtreturn_type : typeoptparams : paramsoptparams : params : type IDENTIFIER COMMA paramsparams : type LBRACKET RBRACKET IDENTIFIER COMMA paramsparams : type IDENTIFIERparams : type LBRACKET RBRACKET IDENTIFIERstatement : RETURN exp SEMIstatement : FOR LPAREN statement exp SEMI exp RPAREN compoundstmtstatement : IF LPAREN exp RPAREN ifstmtstatement : IF LPAREN exp RPAREN ifstmt ELSE elsestmtifstmt : statement\n              | compoundstmtcompoundstmt : LBRACE statements RBRACEstatements : statement statementsstatements : elsestmt : statement\n                | compoundstmtstatement : exp SEMIstatement : IDENTIFIER EQUALS exp SEMIstatement : IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI\n                 | IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMIstatement : type IDENTIFIER SEMIstatement : type IDENTIFIER EQUALS exp SEMIstatement : type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMIstatement : SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMItype : INT\n            | DOUBLE\n            | CHAR\n            | STRING\n            | BOOLEAN\n            | VOIDexp : IDENTIFIER LPAREN optargs RPARENoptargs : argsoptargs : args : exp COMMA argsargs : expexp : INTexp : DOUBLEexp : IDENTIFIERexp  : IDENTIFIER LBRACKET INT RBRACKET\n            | IDENTIFIER LBRACKET IDENTIFIER RBRACKETexp  : PLUSPLUS IDENTIFIER\n            | MINUSMINUS IDENTIFIERexp  : exp PLUS exp\n            | exp MINUS exp\n            | exp TIMES exp\n            | exp DIVIDE exp\n            | exp GT exp\n            | exp GE exp\n            | exp LT exp\n            | exp LE exp\n            | exp EQ exp\n            | exp NE expexp  : LPAREN exp PLUS exp RPAREN\n            | LPAREN exp MINUS exp RPAREN\n            | LPAREN exp TIMES exp RPAREN\n            | LPAREN exp DIVIDE exp RPAREN\n            | LPAREN exp GT exp RPAREN\n            | LPAREN exp GE exp RPAREN\n            | LPAREN exp LT exp RPAREN\n            | LPAREN exp LE exp RPAREN\n            | LPAREN exp EQ exp RPAREN\n            | LPAREN exp NE exp RPARENexp : CHARexp : STRINGexp : BOOLEAN'
    
_lr_action_items = {'RETURN':([0,5,7,36,51,61,71,99,102,119,120,125,126,127,128,133,147,152,153,160,166,167,168,170,171,172,179,181,183,187,191,],[2,2,-7,2,-28,-17,-32,2,-29,2,-3,-19,-21,2,-22,-33,2,2,2,-4,-26,-20,-27,-23,-30,-31,-8,-18,-9,-35,-34,]),'VOID':([0,5,7,17,36,46,51,61,71,99,102,119,120,122,125,126,127,128,133,147,148,152,153,157,160,166,167,168,170,171,172,178,179,181,183,187,188,191,],[3,3,-7,3,3,3,-28,-17,-32,3,-29,3,-3,3,-19,-21,3,-22,-33,3,3,3,3,3,-4,-26,-20,-27,-23,-30,-31,3,-8,-18,-9,-35,3,-34,]),'LBRACKET':([3,8,9,10,14,15,18,20,23,40,41,42,44,45,149,173,],[-41,-39,33,34,-38,-36,-40,-37,60,-37,-39,-36,-38,-40,163,180,]),'STATIC':([17,],[46,]),'PRINTLN':([118,],[145,]),'NEW':([132,],[157,]),'MINUS':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,37,38,62,65,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,108,109,110,111,112,113,114,115,116,117,123,124,135,136,137,138,139,140,141,142,143,144,155,156,158,175,],[-75,-49,-74,-47,-76,58,-48,-53,-75,-49,-74,-47,-48,-76,58,-52,80,58,58,58,-58,-57,-60,-56,-59,-61,-54,-62,-55,-63,-42,-50,-51,58,58,-58,-60,-56,-59,-61,-54,-62,-55,-63,-57,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,58,58,58,58,]),'STRING':([0,2,5,7,13,17,29,31,32,36,46,49,50,51,52,53,54,55,56,57,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,99,101,102,119,120,122,125,126,127,128,130,131,133,134,147,148,152,153,157,159,160,166,167,168,170,171,172,178,179,181,183,187,188,191,],[8,22,8,-7,22,41,22,22,22,8,41,22,22,-28,22,22,22,22,22,22,22,22,-17,22,-32,22,22,22,22,22,22,22,22,22,22,22,8,22,-29,8,-3,41,-19,-21,8,-22,22,22,-33,22,8,41,8,8,41,22,-4,-26,-20,-27,-23,-30,-31,41,-8,-18,-9,-35,41,-34,]),'LE':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,37,38,62,65,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,108,109,110,111,112,113,114,115,116,117,123,124,135,136,137,138,139,140,141,142,143,144,155,156,158,175,],[-75,-49,-74,-47,-76,55,-48,-53,-75,-49,-74,-47,-48,-76,55,-52,77,55,55,55,-58,55,-60,55,-59,-61,55,55,55,55,-42,-50,-51,55,55,-58,-60,55,-59,-61,55,55,55,55,55,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,55,55,55,55,]),'RPAREN':([21,22,23,24,25,26,27,31,37,62,63,64,65,87,88,89,90,91,92,93,94,95,96,100,108,109,110,111,112,113,114,115,116,117,122,123,124,129,135,136,137,138,139,140,141,142,143,144,148,150,151,158,162,164,175,184,185,190,],[-53,-75,-49,-74,-47,-48,-76,-44,-52,99,100,-43,-46,-58,-57,-60,-56,-59,-61,-54,-62,-55,-63,-42,135,136,137,138,139,140,141,142,143,144,-12,-50,-51,-45,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,-12,-11,165,174,176,-15,182,-16,-13,-14,]),'SEMI':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,35,37,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,123,124,135,136,137,138,139,140,141,142,143,144,155,156,182,189,],[-75,-49,-74,-47,-76,51,-48,-53,-75,-49,-74,-47,-48,-76,61,71,-52,102,-58,-57,-60,-56,-59,-61,-54,-62,-55,-63,-42,-50,-51,133,134,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,171,172,187,191,]),'NE':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,37,38,62,65,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,108,109,110,111,112,113,114,115,116,117,123,124,135,136,137,138,139,140,141,142,143,144,155,156,158,175,],[-75,-49,-74,-47,-76,59,-48,-53,-75,-49,-74,-47,-48,-76,59,-52,81,59,59,59,-58,59,-60,59,-59,-61,59,-62,59,-63,-42,-50,-51,59,59,-58,-60,59,-59,-61,59,-62,59,-63,59,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,59,59,59,59,]),'LT':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,37,38,62,65,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,108,109,110,111,112,113,114,115,116,117,123,124,135,136,137,138,139,140,141,142,143,144,155,156,158,175,],[-75,-49,-74,-47,-76,52,-48,-53,-75,-49,-74,-47,-48,-76,52,-52,74,52,52,52,-58,52,-60,52,-59,-61,52,52,52,52,-42,-50,-51,52,52,-58,-60,52,-59,-61,52,52,52,52,52,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,52,52,52,52,]),'PLUS':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,37,38,62,65,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,108,109,110,111,112,113,114,115,116,117,123,124,135,136,137,138,139,140,141,142,143,144,155,156,158,175,],[-75,-49,-74,-47,-76,56,-48,-53,-75,-49,-74,-47,-48,-76,56,-52,78,56,56,56,-58,-57,-60,-56,-59,-61,-54,-62,-55,-63,-42,-50,-51,56,56,-58,-60,-56,-59,-61,-54,-62,-55,-63,-57,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,56,56,56,56,]),'COMMA':([21,22,23,24,25,26,27,37,65,87,88,89,90,91,92,93,94,95,96,100,123,124,135,136,137,138,139,140,141,142,143,144,164,184,],[-53,-75,-49,-74,-47,-48,-76,-52,101,-58,-57,-60,-56,-59,-61,-54,-62,-55,-63,-42,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,178,188,]),'IDENTIFIER':([0,1,2,3,5,7,8,10,12,13,14,15,18,20,29,31,32,33,36,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,99,101,102,119,120,125,126,127,128,130,131,133,134,147,149,152,153,159,160,166,167,168,170,171,172,177,179,181,183,187,191,],[9,21,23,-41,9,-7,-39,35,37,23,-38,-36,-40,-37,23,23,23,68,9,-37,-39,-36,84,-38,-40,-10,86,23,23,-28,23,23,23,23,23,23,23,23,98,-17,105,23,-32,23,23,23,23,23,23,23,23,23,23,23,121,9,23,-29,9,-3,-19,-21,9,-22,23,23,-33,23,9,164,9,9,23,-4,-26,-20,-27,-23,-30,-31,184,-8,-18,-9,-35,-34,]),'PERIOD':([16,83,],[39,118,]),'$end':([0,5,6,7,30,51,61,71,102,120,125,126,128,133,160,166,167,168,170,171,172,179,181,183,187,191,],[-2,-2,0,-7,-1,-28,-17,-32,-29,-3,-19,-21,-22,-33,-4,-26,-20,-27,-23,-30,-31,-8,-18,-9,-35,-34,]),'GT':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,37,38,62,65,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,108,109,110,111,112,113,114,115,116,117,123,124,135,136,137,138,139,140,141,142,143,144,155,156,158,175,],[-75,-49,-74,-47,-76,49,-48,-53,-75,-49,-74,-47,-48,-76,49,-52,73,49,49,49,-58,49,-60,49,-59,-61,49,49,49,49,-42,-50,-51,49,49,-58,-60,49,-59,-61,49,49,49,49,49,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,49,49,49,49,]),'DIVIDE':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,37,38,62,65,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,108,109,110,111,112,113,114,115,116,117,123,124,135,136,137,138,139,140,141,142,143,144,155,156,158,175,],[-75,-49,-74,-47,-76,50,-48,-53,-75,-49,-74,-47,-48,-76,50,-52,82,50,50,50,-58,-57,-60,-56,-59,-61,50,-62,50,-63,-42,-50,-51,50,50,-58,-60,-56,-59,-61,50,-62,50,-63,-57,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,50,50,50,50,]),'FOR':([0,5,7,36,51,61,71,99,102,119,120,125,126,127,128,133,147,152,153,160,166,167,168,170,171,172,179,181,183,187,191,],[11,11,-7,11,-28,-17,-32,11,-29,11,-3,-19,-21,11,-22,-33,11,11,11,-4,-26,-20,-27,-23,-30,-31,-8,-18,-9,-35,-34,]),'PLUSPLUS':([0,2,5,7,13,29,31,32,36,49,50,51,52,53,54,55,56,57,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,99,101,102,119,120,125,126,127,128,130,131,133,134,147,152,153,159,160,166,167,168,170,171,172,179,181,183,187,191,],[12,12,12,-7,12,12,12,12,12,12,12,-28,12,12,12,12,12,12,12,12,-17,12,-32,12,12,12,12,12,12,12,12,12,12,12,12,12,-29,12,-3,-19,-21,12,-22,12,12,-33,12,12,12,12,12,-4,-26,-20,-27,-23,-30,-31,-8,-18,-9,-35,-34,]),'EQUALS':([9,35,103,104,105,],[32,70,130,131,132,]),'RBRACE':([7,51,61,71,102,119,120,125,126,127,128,133,146,147,153,154,160,161,166,167,168,169,170,171,172,179,181,183,187,191,],[-7,-28,-17,-32,-29,-6,-3,-19,-21,-25,-22,-33,160,-6,-25,170,-4,-5,-26,-20,-27,-24,-23,-30,-31,-8,-18,-9,-35,-34,]),'TIMES':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,37,38,62,65,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,108,109,110,111,112,113,114,115,116,117,123,124,135,136,137,138,139,140,141,142,143,144,155,156,158,175,],[-75,-49,-74,-47,-76,53,-48,-53,-75,-49,-74,-47,-48,-76,53,-52,75,53,53,53,-58,-57,-60,-56,-59,-61,53,-62,53,-63,-42,-50,-51,53,53,-58,-60,-56,-59,-61,53,-62,53,-63,-57,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,53,53,53,53,]),'GE':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,37,38,62,65,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,108,109,110,111,112,113,114,115,116,117,123,124,135,136,137,138,139,140,141,142,143,144,155,156,158,175,],[-75,-49,-74,-47,-76,54,-48,-53,-75,-49,-74,-47,-48,-76,54,-52,76,54,54,54,-58,54,-60,54,-59,-61,54,54,54,54,-42,-50,-51,54,54,-58,-60,54,-59,-61,54,54,54,54,54,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,54,54,54,54,]),'LPAREN':([0,2,4,5,7,9,11,13,23,29,31,32,36,49,50,51,52,53,54,55,56,57,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,86,99,101,102,119,120,121,125,126,127,128,130,131,133,134,145,147,152,153,159,160,166,167,168,170,171,172,179,181,183,187,191,],[13,13,29,13,-7,31,36,13,31,13,13,13,13,13,13,-28,13,13,13,13,13,13,13,13,-17,13,-32,13,13,13,13,13,13,13,13,13,13,13,122,13,13,-29,13,-3,148,-19,-21,13,-22,13,13,-33,13,159,13,13,13,13,-4,-26,-20,-27,-23,-30,-31,-8,-18,-9,-35,-34,]),'MINUSMINUS':([0,2,5,7,13,29,31,32,36,49,50,51,52,53,54,55,56,57,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,99,101,102,119,120,125,126,127,128,130,131,133,134,147,152,153,159,160,166,167,168,170,171,172,179,181,183,187,191,],[1,1,1,-7,1,1,1,1,1,1,1,-28,1,1,1,1,1,1,1,1,-17,1,-32,1,1,1,1,1,1,1,1,1,1,1,1,1,-29,1,-3,-19,-21,1,-22,1,1,-33,1,1,1,1,1,-4,-26,-20,-27,-23,-30,-31,-8,-18,-9,-35,-34,]),'ELSE':([51,61,71,102,125,126,128,133,166,167,168,170,171,172,181,187,191,],[-28,-17,-32,-29,152,-21,-22,-33,-26,-20,-27,-23,-30,-31,-18,-35,-34,]),'EQ':([8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,37,38,62,65,66,87,88,89,90,91,92,93,94,95,96,100,103,104,106,107,108,109,110,111,112,113,114,115,116,117,123,124,135,136,137,138,139,140,141,142,143,144,155,156,158,175,],[-75,-49,-74,-47,-76,57,-48,-53,-75,-49,-74,-47,-48,-76,57,-52,79,57,57,57,-58,57,-60,57,-59,-61,57,-62,57,-63,-42,-50,-51,57,57,-58,-60,57,-59,-61,57,-62,57,-63,57,-50,-51,-68,-70,-66,-69,-71,-64,-72,-65,-73,-67,57,57,57,57,]),'IF':([0,5,7,36,51,61,71,99,102,119,120,125,126,127,128,133,147,152,153,160,166,167,168,170,171,172,179,181,183,187,191,],[4,4,-7,4,-28,-17,-32,4,-29,4,-3,-19,-21,4,-22,-33,4,4,4,-4,-26,-20,-27,-23,-30,-31,-8,-18,-9,-35,-34,]),'CHAR':([0,2,5,7,13,17,29,31,32,36,46,49,50,51,52,53,54,55,56,57,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,99,101,102,119,120,122,125,126,127,128,130,131,133,134,147,148,152,153,157,159,160,166,167,168,170,171,172,178,179,181,183,187,188,191,],[14,24,14,-7,24,44,24,24,24,14,44,24,24,-28,24,24,24,24,24,24,24,24,-17,24,-32,24,24,24,24,24,24,24,24,24,24,24,14,24,-29,14,-3,44,-19,-21,14,-22,24,24,-33,24,14,44,14,14,44,24,-4,-26,-20,-27,-23,-30,-31,44,-8,-18,-9,-35,44,-34,]),'LBRACE':([84,99,152,165,174,176,],[119,127,127,127,127,127,]),'INT':([0,2,5,7,13,17,29,31,32,33,36,46,49,50,51,52,53,54,55,56,57,58,59,60,61,70,71,72,73,74,75,76,77,78,79,80,81,82,99,101,102,119,120,122,125,126,127,128,130,131,133,134,147,148,152,153,157,159,160,166,167,168,170,171,172,178,179,180,181,183,187,188,191,],[15,25,15,-7,25,42,25,25,25,67,15,42,25,25,-28,25,25,25,25,25,25,25,25,97,-17,25,-32,25,25,25,25,25,25,25,25,25,25,25,15,25,-29,15,-3,42,-19,-21,15,-22,25,25,-33,25,15,42,15,15,42,25,-4,-26,-20,-27,-23,-30,-31,42,-8,186,-18,-9,-35,42,-34,]),'DOUBLE':([0,2,5,7,13,17,29,31,32,36,46,49,50,51,52,53,54,55,56,57,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,99,101,102,119,120,122,125,126,127,128,130,131,133,134,147,148,152,153,157,159,160,166,167,168,170,171,172,178,179,181,183,187,188,191,],[20,26,20,-7,26,40,26,26,26,20,40,26,26,-28,26,26,26,26,26,26,26,26,-17,26,-32,26,26,26,26,26,26,26,26,26,26,26,20,26,-29,20,-3,40,-19,-21,20,-22,26,26,-33,26,20,40,20,20,40,26,-4,-26,-20,-27,-23,-30,-31,40,-8,-18,-9,-35,40,-34,]),'SYSTEM':([0,5,7,36,51,61,71,99,102,119,120,125,126,127,128,133,147,152,153,160,166,167,168,170,171,172,179,181,183,187,191,],[16,16,-7,16,-28,-17,-32,16,-29,16,-3,-19,-21,16,-22,-33,16,16,16,-4,-26,-20,-27,-23,-30,-31,-8,-18,-9,-35,-34,]),'CLASS':([17,],[43,]),'BOOLEAN':([0,2,5,7,13,17,29,31,32,36,46,49,50,51,52,53,54,55,56,57,58,59,61,70,71,72,73,74,75,76,77,78,79,80,81,82,99,101,102,119,120,122,125,126,127,128,130,131,133,134,147,148,152,153,157,159,160,166,167,168,170,171,172,178,179,181,183,187,188,191,],[18,27,18,-7,27,45,27,27,27,18,45,27,27,-28,27,27,27,27,27,27,27,27,-17,27,-32,27,27,27,27,27,27,27,27,27,27,27,18,27,-29,18,-3,45,-19,-21,18,-22,27,27,-33,27,18,45,18,18,45,27,-4,-26,-20,-27,-23,-30,-31,45,-8,-18,-9,-35,45,-34,]),'RBRACKET':([34,67,68,97,98,163,186,],[69,103,104,123,124,177,189,]),'OUT':([39,],[83,]),'PUBLIC':([0,5,7,51,61,71,102,119,120,125,126,128,133,147,160,166,167,168,170,171,172,179,181,183,187,191,],[17,17,-7,-28,-17,-32,-29,17,-3,-19,-21,-22,-33,17,-4,-26,-20,-27,-23,-30,-31,-8,-18,-9,-35,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'elements':([119,147,],[146,161,]),'java':([0,5,],[6,30,]),'statement':([0,5,36,99,119,127,147,152,153,],[7,7,72,126,7,153,7,166,153,]),'compoundstmt':([99,152,165,174,176,],[128,168,179,181,183,]),'optparams':([122,148,],[151,162,]),'args':([31,101,],[64,129,]),'element':([0,5,119,147,],[5,5,147,147,]),'statements':([127,153,],[154,169,]),'ifstmt':([99,],[125,]),'elsestmt':([152,],[167,]),'exp':([0,2,5,13,29,31,32,36,49,50,52,53,54,55,56,57,58,59,70,72,73,74,75,76,77,78,79,80,81,82,99,101,119,127,130,131,134,147,152,153,159,],[19,28,19,38,62,65,66,19,87,88,89,90,91,92,93,94,95,96,106,107,108,109,110,111,112,113,114,115,116,117,19,65,19,19,155,156,158,19,19,19,175,]),'params':([122,148,178,188,],[150,150,185,190,]),'return_type':([17,46,],[48,85,]),'type':([0,5,17,36,46,99,119,122,127,147,148,152,153,157,178,188,],[10,10,47,10,47,10,10,149,10,10,149,10,10,173,149,149,]),'compoundelem':([84,],[120,]),'optargs':([31,],[63,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> java","S'",1,None,None,None),
  ('java -> element java','java',2,'p_java','java_parser.py',20),
  ('java -> <empty>','java',0,'p_java_empty','java_parser.py',24),
  ('element -> PUBLIC CLASS IDENTIFIER compoundelem','element',4,'p_element_class','java_parser.py',28),
  ('compoundelem -> LBRACE elements RBRACE','compoundelem',3,'p_compoundelem','java_parser.py',32),
  ('elements -> element elements','elements',2,'p_elements','java_parser.py',36),
  ('elements -> <empty>','elements',0,'p_elements_empty','java_parser.py',40),
  ('element -> statement','element',1,'p_element_statement','java_parser.py',44),
  ('element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt','element',7,'p_element_function','java_parser.py',48),
  ('element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt','element',8,'p_element_function_static','java_parser.py',52),
  ('return_type -> type','return_type',1,'p_return_type','java_parser.py',56),
  ('optparams -> params','optparams',1,'p_optparams','java_parser.py',60),
  ('optparams -> <empty>','optparams',0,'p_optparams_empty','java_parser.py',64),
  ('params -> type IDENTIFIER COMMA params','params',4,'p_params','java_parser.py',68),
  ('params -> type LBRACKET RBRACKET IDENTIFIER COMMA params','params',6,'p_params_array','java_parser.py',72),
  ('params -> type IDENTIFIER','params',2,'p_params_last','java_parser.py',76),
  ('params -> type LBRACKET RBRACKET IDENTIFIER','params',4,'p_params_array_last','java_parser.py',80),
  ('statement -> RETURN exp SEMI','statement',3,'p_statement_return','java_parser.py',84),
  ('statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt','statement',8,'p_statement_for_loop','java_parser.py',88),
  ('statement -> IF LPAREN exp RPAREN ifstmt','statement',5,'p_statement_if_then','java_parser.py',92),
  ('statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt','statement',7,'p_statement_if_then_else','java_parser.py',96),
  ('ifstmt -> statement','ifstmt',1,'p_ifstmt','java_parser.py',100),
  ('ifstmt -> compoundstmt','ifstmt',1,'p_ifstmt','java_parser.py',101),
  ('compoundstmt -> LBRACE statements RBRACE','compoundstmt',3,'p_compoundstmt','java_parser.py',105),
  ('statements -> statement statements','statements',2,'p_statements','java_parser.py',109),
  ('statements -> <empty>','statements',0,'p_statements_empty','java_parser.py',113),
  ('elsestmt -> statement','elsestmt',1,'p_elsestmt','java_parser.py',117),
  ('elsestmt -> compoundstmt','elsestmt',1,'p_elsestmt','java_parser.py',118),
  ('statement -> exp SEMI','statement',2,'p_statement_exp','java_parser.py',122),
  ('statement -> IDENTIFIER EQUALS exp SEMI','statement',4,'p_statement_identifier_assignment','java_parser.py',126),
  ('statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI','statement',7,'p_statement_array_assignment','java_parser.py',130),
  ('statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI','statement',7,'p_statement_array_assignment','java_parser.py',131),
  ('statement -> type IDENTIFIER SEMI','statement',3,'p_statement_var_decl','java_parser.py',135),
  ('statement -> type IDENTIFIER EQUALS exp SEMI','statement',5,'p_statement_var_decl_init','java_parser.py',139),
  ('statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI','statement',11,'p_statement_array_decl','java_parser.py',143),
  ('statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI','statement',9,'p_statement_print','java_parser.py',147),
  ('type -> INT','type',1,'p_type','java_parser.py',151),
  ('type -> DOUBLE','type',1,'p_type','java_parser.py',152),
  ('type -> CHAR','type',1,'p_type','java_parser.py',153),
  ('type -> STRING','type',1,'p_type','java_parser.py',154),
  ('type -> BOOLEAN','type',1,'p_type','java_parser.py',155),
  ('type -> VOID','type',1,'p_type','java_parser.py',156),
  ('exp -> IDENTIFIER LPAREN optargs RPAREN','exp',4,'p_exp_call','java_parser.py',160),
  ('optargs -> args','optargs',1,'p_optargs','java_parser.py',164),
  ('optargs -> <empty>','optargs',0,'p_optargsempty','java_parser.py',168),
  ('args -> exp COMMA args','args',3,'p_args','java_parser.py',172),
  ('args -> exp','args',1,'p_args_last','java_parser.py',176),
  ('exp -> INT','exp',1,'p_exp_int','java_parser.py',180),
  ('exp -> DOUBLE','exp',1,'p_exp_double','java_parser.py',184),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','java_parser.py',188),
  ('exp -> IDENTIFIER LBRACKET INT RBRACKET','exp',4,'p_exp_identifier_array','java_parser.py',192),
  ('exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET','exp',4,'p_exp_identifier_array','java_parser.py',193),
  ('exp -> PLUSPLUS IDENTIFIER','exp',2,'p_exp_unaryop','java_parser.py',197),
  ('exp -> MINUSMINUS IDENTIFIER','exp',2,'p_exp_unaryop','java_parser.py',198),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','java_parser.py',202),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','java_parser.py',203),
  ('exp -> exp TIMES exp','exp',3,'p_exp_binop','java_parser.py',204),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','java_parser.py',205),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','java_parser.py',206),
  ('exp -> exp GE exp','exp',3,'p_exp_binop','java_parser.py',207),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','java_parser.py',208),
  ('exp -> exp LE exp','exp',3,'p_exp_binop','java_parser.py',209),
  ('exp -> exp EQ exp','exp',3,'p_exp_binop','java_parser.py',210),
  ('exp -> exp NE exp','exp',3,'p_exp_binop','java_parser.py',211),
  ('exp -> LPAREN exp PLUS exp RPAREN','exp',5,'p_exp_binop_paren','java_parser.py',215),
  ('exp -> LPAREN exp MINUS exp RPAREN','exp',5,'p_exp_binop_paren','java_parser.py',216),
  ('exp -> LPAREN exp TIMES exp RPAREN','exp',5,'p_exp_binop_paren','java_parser.py',217),
  ('exp -> LPAREN exp DIVIDE exp RPAREN','exp',5,'p_exp_binop_paren','java_parser.py',218),
  ('exp -> LPAREN exp GT exp RPAREN','exp',5,'p_exp_binop_paren','java_parser.py',219),
  ('exp -> LPAREN exp GE exp RPAREN','exp',5,'p_exp_binop_paren','java_parser.py',220),
  ('exp -> LPAREN exp LT exp RPAREN','exp',5,'p_exp_binop_paren','java_parser.py',221),
  ('exp -> LPAREN exp LE exp RPAREN','exp',5,'p_exp_binop_paren','java_parser.py',222),
  ('exp -> LPAREN exp EQ exp RPAREN','exp',5,'p_exp_binop_paren','java_parser.py',223),
  ('exp -> LPAREN exp NE exp RPAREN','exp',5,'p_exp_binop_paren','java_parser.py',224),
  ('exp -> CHAR','exp',1,'p_exp_char','java_parser.py',228),
  ('exp -> STRING','exp',1,'p_exp_string','java_parser.py',232),
  ('exp -> BOOLEAN','exp',1,'p_exp_boolean','java_parser.py',236),
]

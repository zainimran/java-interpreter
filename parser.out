Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CONST
    SYNCHRONIZED
    DEFAULT
    ABSTRACT
    GOTO
    ASSERT
    TRANSIENT
    WHILE
    PROTECTED
    FINAL
    CASE
    THROW
    PRIVATE
    STRICTFP
    CONTINUE
    COLON
    CATCH
    IMPLEMENTS
    D
    PACKAGE
    ENUM
    NATIVE
    NOT
    FINALLY
    EXTENDS
    IMPORT
    BYTE
    AND
    PLUSEQUAL
    MINUSEQUAL
    OR
    BREAK
    THIS
    VOLATILE
    INTERFACE
    THROWS
    SWITCH
    SUPER
    INSTANCEOF
    MOD

Grammar

Rule 0     S' -> java
Rule 1     java -> element java
Rule 2     java -> <empty>
Rule 3     element -> PUBLIC CLASS IDENTIFIER compoundelem
Rule 4     compoundelem -> LBRACE elements RBRACE
Rule 5     elements -> element elements
Rule 6     elements -> <empty>
Rule 7     element -> statement
Rule 8     element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
Rule 9     element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
Rule 10    return_type -> type
Rule 11    optparams -> params
Rule 12    optparams -> <empty>
Rule 13    params -> type IDENTIFIER COMMA params
Rule 14    params -> type LBRACKET RBRACKET IDENTIFIER COMMA params
Rule 15    params -> type IDENTIFIER
Rule 16    params -> type LBRACKET RBRACKET IDENTIFIER
Rule 17    statement -> RETURN exp SEMI
Rule 18    statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt
Rule 19    statement -> IF LPAREN exp RPAREN ifstmt
Rule 20    statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt
Rule 21    ifstmt -> statement
Rule 22    ifstmt -> compoundstmt
Rule 23    compoundstmt -> LBRACE statements RBRACE
Rule 24    statements -> statement statements
Rule 25    statements -> <empty>
Rule 26    elsestmt -> statement
Rule 27    elsestmt -> compoundstmt
Rule 28    statement -> exp SEMI
Rule 29    statement -> IDENTIFIER EQUALS exp SEMI
Rule 30    statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI
Rule 31    statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
Rule 32    statement -> type IDENTIFIER SEMI
Rule 33    statement -> type IDENTIFIER EQUALS exp SEMI
Rule 34    statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI
Rule 35    statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI
Rule 36    type -> INT
Rule 37    type -> DOUBLE
Rule 38    type -> CHAR
Rule 39    type -> STRING
Rule 40    type -> BOOLEAN
Rule 41    type -> VOID
Rule 42    exp -> IDENTIFIER LPAREN optargs RPAREN
Rule 43    optargs -> args
Rule 44    optargs -> <empty>
Rule 45    args -> exp COMMA args
Rule 46    args -> exp
Rule 47    exp -> INT
Rule 48    exp -> DOUBLE
Rule 49    exp -> IDENTIFIER
Rule 50    exp -> IDENTIFIER LBRACKET INT RBRACKET
Rule 51    exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET
Rule 52    exp -> PLUSPLUS IDENTIFIER
Rule 53    exp -> MINUSMINUS IDENTIFIER
Rule 54    exp -> exp PLUS exp
Rule 55    exp -> exp MINUS exp
Rule 56    exp -> exp TIMES exp
Rule 57    exp -> exp DIVIDE exp
Rule 58    exp -> exp GT exp
Rule 59    exp -> exp GE exp
Rule 60    exp -> exp LT exp
Rule 61    exp -> exp LE exp
Rule 62    exp -> exp EQ exp
Rule 63    exp -> exp NE exp
Rule 64    exp -> LPAREN exp PLUS exp RPAREN
Rule 65    exp -> LPAREN exp MINUS exp RPAREN
Rule 66    exp -> LPAREN exp TIMES exp RPAREN
Rule 67    exp -> LPAREN exp DIVIDE exp RPAREN
Rule 68    exp -> LPAREN exp GT exp RPAREN
Rule 69    exp -> LPAREN exp GE exp RPAREN
Rule 70    exp -> LPAREN exp LT exp RPAREN
Rule 71    exp -> LPAREN exp LE exp RPAREN
Rule 72    exp -> LPAREN exp EQ exp RPAREN
Rule 73    exp -> LPAREN exp NE exp RPAREN
Rule 74    exp -> CHAR
Rule 75    exp -> STRING
Rule 76    exp -> BOOLEAN

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
ASSERT               : 
BOOLEAN              : 40 76
BREAK                : 
BYTE                 : 
CASE                 : 
CATCH                : 
CHAR                 : 38 74
CLASS                : 3
COLON                : 
COMMA                : 13 14 45
CONST                : 
CONTINUE             : 
D                    : 
DEFAULT              : 
DIVIDE               : 57 67
DOUBLE               : 37 48
ELSE                 : 20
ENUM                 : 
EQ                   : 62 72
EQUALS               : 29 30 31 33 34
EXTENDS              : 
FINAL                : 
FINALLY              : 
FOR                  : 18
GE                   : 59 69
GOTO                 : 
GT                   : 58 68
IDENTIFIER           : 3 8 9 13 14 15 16 29 30 31 31 32 33 34 42 49 50 51 51 52 53
IF                   : 19 20
IMPLEMENTS           : 
IMPORT               : 
INSTANCEOF           : 
INT                  : 30 34 36 47 50
INTERFACE            : 
LBRACE               : 4 23
LBRACKET             : 14 16 30 31 34 34 50 51
LE                   : 61 71
LPAREN               : 8 9 18 19 20 35 42 64 65 66 67 68 69 70 71 72 73
LT                   : 60 70
MINUS                : 55 65
MINUSEQUAL           : 
MINUSMINUS           : 53
MOD                  : 
NATIVE               : 
NE                   : 63 73
NEW                  : 34
NOT                  : 
OR                   : 
OUT                  : 35
PACKAGE              : 
PERIOD               : 35 35
PLUS                 : 54 64
PLUSEQUAL            : 
PLUSPLUS             : 52
PRINTLN              : 35
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 3 8 9
RBRACE               : 4 23
RBRACKET             : 14 16 30 31 34 34 50 51
RETURN               : 17
RPAREN               : 8 9 18 19 20 35 42 64 65 66 67 68 69 70 71 72 73
SEMI                 : 17 18 28 29 30 31 32 33 34 35
STATIC               : 9
STRICTFP             : 
STRING               : 39 75
SUPER                : 
SWITCH               : 
SYNCHRONIZED         : 
SYSTEM               : 35
THIS                 : 
THROW                : 
THROWS               : 
TIMES                : 56 66
TRANSIENT            : 
VOID                 : 41
VOLATILE             : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

args                 : 43 45
compoundelem         : 3
compoundstmt         : 8 9 18 22 27
element              : 1 5
elements             : 4 5
elsestmt             : 20
exp                  : 17 18 18 19 20 28 29 30 31 33 35 45 46 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73
ifstmt               : 19 20
java                 : 1 0
optargs              : 42
optparams            : 8 9
params               : 11 13 14
return_type          : 8 9
statement            : 7 18 21 24 26
statements           : 23 24
type                 : 10 13 14 15 16 32 33 34 34

Parsing method: LALR

state 0

    (0) S' -> . java
    (1) java -> . element java
    (2) java -> .
    (3) element -> . PUBLIC CLASS IDENTIFIER compoundelem
    (7) element -> . statement
    (8) element -> . PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (9) element -> . PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (17) statement -> . RETURN exp SEMI
    (18) statement -> . FOR LPAREN statement exp SEMI exp RPAREN compoundstmt
    (19) statement -> . IF LPAREN exp RPAREN ifstmt
    (20) statement -> . IF LPAREN exp RPAREN ifstmt ELSE elsestmt
    (28) statement -> . exp SEMI
    (29) statement -> . IDENTIFIER EQUALS exp SEMI
    (30) statement -> . IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI
    (31) statement -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
    (32) statement -> . type IDENTIFIER SEMI
    (33) statement -> . type IDENTIFIER EQUALS exp SEMI
    (34) statement -> . type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI
    (35) statement -> . SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    $end            reduce using rule 2 (java -> .)
    PUBLIC          shift and go to state 17
    RETURN          shift and go to state 2
    FOR             shift and go to state 11
    IF              shift and go to state 4
    IDENTIFIER      shift and go to state 9
    SYSTEM          shift and go to state 16
    INT             shift and go to state 15
    DOUBLE          shift and go to state 20
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 18
    VOID            shift and go to state 3

    java                           shift and go to state 6
    exp                            shift and go to state 19
    type                           shift and go to state 10
    element                        shift and go to state 5
    statement                      shift and go to state 7

state 1

    (53) exp -> MINUSMINUS . IDENTIFIER

    IDENTIFIER      shift and go to state 21


state 2

    (17) statement -> RETURN . exp SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 28

state 3

    (41) type -> VOID .

    IDENTIFIER      reduce using rule 41 (type -> VOID .)
    LBRACKET        reduce using rule 41 (type -> VOID .)


state 4

    (19) statement -> IF . LPAREN exp RPAREN ifstmt
    (20) statement -> IF . LPAREN exp RPAREN ifstmt ELSE elsestmt

    LPAREN          shift and go to state 29


state 5

    (1) java -> element . java
    (1) java -> . element java
    (2) java -> .
    (3) element -> . PUBLIC CLASS IDENTIFIER compoundelem
    (7) element -> . statement
    (8) element -> . PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (9) element -> . PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (17) statement -> . RETURN exp SEMI
    (18) statement -> . FOR LPAREN statement exp SEMI exp RPAREN compoundstmt
    (19) statement -> . IF LPAREN exp RPAREN ifstmt
    (20) statement -> . IF LPAREN exp RPAREN ifstmt ELSE elsestmt
    (28) statement -> . exp SEMI
    (29) statement -> . IDENTIFIER EQUALS exp SEMI
    (30) statement -> . IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI
    (31) statement -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
    (32) statement -> . type IDENTIFIER SEMI
    (33) statement -> . type IDENTIFIER EQUALS exp SEMI
    (34) statement -> . type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI
    (35) statement -> . SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    $end            reduce using rule 2 (java -> .)
    PUBLIC          shift and go to state 17
    RETURN          shift and go to state 2
    FOR             shift and go to state 11
    IF              shift and go to state 4
    IDENTIFIER      shift and go to state 9
    SYSTEM          shift and go to state 16
    INT             shift and go to state 15
    DOUBLE          shift and go to state 20
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 18
    VOID            shift and go to state 3

    java                           shift and go to state 30
    exp                            shift and go to state 19
    type                           shift and go to state 10
    element                        shift and go to state 5
    statement                      shift and go to state 7

state 6

    (0) S' -> java .



state 7

    (7) element -> statement .

    PUBLIC          reduce using rule 7 (element -> statement .)
    RETURN          reduce using rule 7 (element -> statement .)
    FOR             reduce using rule 7 (element -> statement .)
    IF              reduce using rule 7 (element -> statement .)
    IDENTIFIER      reduce using rule 7 (element -> statement .)
    SYSTEM          reduce using rule 7 (element -> statement .)
    INT             reduce using rule 7 (element -> statement .)
    DOUBLE          reduce using rule 7 (element -> statement .)
    PLUSPLUS        reduce using rule 7 (element -> statement .)
    MINUSMINUS      reduce using rule 7 (element -> statement .)
    LPAREN          reduce using rule 7 (element -> statement .)
    CHAR            reduce using rule 7 (element -> statement .)
    STRING          reduce using rule 7 (element -> statement .)
    BOOLEAN         reduce using rule 7 (element -> statement .)
    VOID            reduce using rule 7 (element -> statement .)
    RBRACE          reduce using rule 7 (element -> statement .)
    $end            reduce using rule 7 (element -> statement .)


state 8

    (75) exp -> STRING .
    (39) type -> STRING .

    SEMI            reduce using rule 75 (exp -> STRING .)
    PLUS            reduce using rule 75 (exp -> STRING .)
    MINUS           reduce using rule 75 (exp -> STRING .)
    TIMES           reduce using rule 75 (exp -> STRING .)
    DIVIDE          reduce using rule 75 (exp -> STRING .)
    GT              reduce using rule 75 (exp -> STRING .)
    GE              reduce using rule 75 (exp -> STRING .)
    LT              reduce using rule 75 (exp -> STRING .)
    LE              reduce using rule 75 (exp -> STRING .)
    EQ              reduce using rule 75 (exp -> STRING .)
    NE              reduce using rule 75 (exp -> STRING .)
    IDENTIFIER      reduce using rule 39 (type -> STRING .)
    LBRACKET        reduce using rule 39 (type -> STRING .)


state 9

    (29) statement -> IDENTIFIER . EQUALS exp SEMI
    (30) statement -> IDENTIFIER . LBRACKET INT RBRACKET EQUALS exp SEMI
    (31) statement -> IDENTIFIER . LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
    (42) exp -> IDENTIFIER . LPAREN optargs RPAREN
    (49) exp -> IDENTIFIER .
    (50) exp -> IDENTIFIER . LBRACKET INT RBRACKET
    (51) exp -> IDENTIFIER . LBRACKET IDENTIFIER RBRACKET

    EQUALS          shift and go to state 32
    LBRACKET        shift and go to state 33
    LPAREN          shift and go to state 31
    SEMI            reduce using rule 49 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 49 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 49 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 49 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 49 (exp -> IDENTIFIER .)
    GT              reduce using rule 49 (exp -> IDENTIFIER .)
    GE              reduce using rule 49 (exp -> IDENTIFIER .)
    LT              reduce using rule 49 (exp -> IDENTIFIER .)
    LE              reduce using rule 49 (exp -> IDENTIFIER .)
    EQ              reduce using rule 49 (exp -> IDENTIFIER .)
    NE              reduce using rule 49 (exp -> IDENTIFIER .)


state 10

    (32) statement -> type . IDENTIFIER SEMI
    (33) statement -> type . IDENTIFIER EQUALS exp SEMI
    (34) statement -> type . LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI

    IDENTIFIER      shift and go to state 35
    LBRACKET        shift and go to state 34


state 11

    (18) statement -> FOR . LPAREN statement exp SEMI exp RPAREN compoundstmt

    LPAREN          shift and go to state 36


state 12

    (52) exp -> PLUSPLUS . IDENTIFIER

    IDENTIFIER      shift and go to state 37


state 13

    (64) exp -> LPAREN . exp PLUS exp RPAREN
    (65) exp -> LPAREN . exp MINUS exp RPAREN
    (66) exp -> LPAREN . exp TIMES exp RPAREN
    (67) exp -> LPAREN . exp DIVIDE exp RPAREN
    (68) exp -> LPAREN . exp GT exp RPAREN
    (69) exp -> LPAREN . exp GE exp RPAREN
    (70) exp -> LPAREN . exp LT exp RPAREN
    (71) exp -> LPAREN . exp LE exp RPAREN
    (72) exp -> LPAREN . exp EQ exp RPAREN
    (73) exp -> LPAREN . exp NE exp RPAREN
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 38

state 14

    (74) exp -> CHAR .
    (38) type -> CHAR .

    SEMI            reduce using rule 74 (exp -> CHAR .)
    PLUS            reduce using rule 74 (exp -> CHAR .)
    MINUS           reduce using rule 74 (exp -> CHAR .)
    TIMES           reduce using rule 74 (exp -> CHAR .)
    DIVIDE          reduce using rule 74 (exp -> CHAR .)
    GT              reduce using rule 74 (exp -> CHAR .)
    GE              reduce using rule 74 (exp -> CHAR .)
    LT              reduce using rule 74 (exp -> CHAR .)
    LE              reduce using rule 74 (exp -> CHAR .)
    EQ              reduce using rule 74 (exp -> CHAR .)
    NE              reduce using rule 74 (exp -> CHAR .)
    IDENTIFIER      reduce using rule 38 (type -> CHAR .)
    LBRACKET        reduce using rule 38 (type -> CHAR .)


state 15

    (47) exp -> INT .
    (36) type -> INT .

    SEMI            reduce using rule 47 (exp -> INT .)
    PLUS            reduce using rule 47 (exp -> INT .)
    MINUS           reduce using rule 47 (exp -> INT .)
    TIMES           reduce using rule 47 (exp -> INT .)
    DIVIDE          reduce using rule 47 (exp -> INT .)
    GT              reduce using rule 47 (exp -> INT .)
    GE              reduce using rule 47 (exp -> INT .)
    LT              reduce using rule 47 (exp -> INT .)
    LE              reduce using rule 47 (exp -> INT .)
    EQ              reduce using rule 47 (exp -> INT .)
    NE              reduce using rule 47 (exp -> INT .)
    IDENTIFIER      reduce using rule 36 (type -> INT .)
    LBRACKET        reduce using rule 36 (type -> INT .)


state 16

    (35) statement -> SYSTEM . PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI

    PERIOD          shift and go to state 39


state 17

    (3) element -> PUBLIC . CLASS IDENTIFIER compoundelem
    (8) element -> PUBLIC . return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (9) element -> PUBLIC . STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (10) return_type -> . type
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    CLASS           shift and go to state 43
    STATIC          shift and go to state 46
    INT             shift and go to state 42
    DOUBLE          shift and go to state 40
    CHAR            shift and go to state 44
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 3

    type                           shift and go to state 47
    return_type                    shift and go to state 48

state 18

    (76) exp -> BOOLEAN .
    (40) type -> BOOLEAN .

    SEMI            reduce using rule 76 (exp -> BOOLEAN .)
    PLUS            reduce using rule 76 (exp -> BOOLEAN .)
    MINUS           reduce using rule 76 (exp -> BOOLEAN .)
    TIMES           reduce using rule 76 (exp -> BOOLEAN .)
    DIVIDE          reduce using rule 76 (exp -> BOOLEAN .)
    GT              reduce using rule 76 (exp -> BOOLEAN .)
    GE              reduce using rule 76 (exp -> BOOLEAN .)
    LT              reduce using rule 76 (exp -> BOOLEAN .)
    LE              reduce using rule 76 (exp -> BOOLEAN .)
    EQ              reduce using rule 76 (exp -> BOOLEAN .)
    NE              reduce using rule 76 (exp -> BOOLEAN .)
    IDENTIFIER      reduce using rule 40 (type -> BOOLEAN .)
    LBRACKET        reduce using rule 40 (type -> BOOLEAN .)


state 19

    (28) statement -> exp . SEMI
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    SEMI            shift and go to state 51
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 20

    (48) exp -> DOUBLE .
    (37) type -> DOUBLE .

    SEMI            reduce using rule 48 (exp -> DOUBLE .)
    PLUS            reduce using rule 48 (exp -> DOUBLE .)
    MINUS           reduce using rule 48 (exp -> DOUBLE .)
    TIMES           reduce using rule 48 (exp -> DOUBLE .)
    DIVIDE          reduce using rule 48 (exp -> DOUBLE .)
    GT              reduce using rule 48 (exp -> DOUBLE .)
    GE              reduce using rule 48 (exp -> DOUBLE .)
    LT              reduce using rule 48 (exp -> DOUBLE .)
    LE              reduce using rule 48 (exp -> DOUBLE .)
    EQ              reduce using rule 48 (exp -> DOUBLE .)
    NE              reduce using rule 48 (exp -> DOUBLE .)
    IDENTIFIER      reduce using rule 37 (type -> DOUBLE .)
    LBRACKET        reduce using rule 37 (type -> DOUBLE .)


state 21

    (53) exp -> MINUSMINUS IDENTIFIER .

    PLUS            reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    MINUS           reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    TIMES           reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    DIVIDE          reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    GT              reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    GE              reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    LT              reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    LE              reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    EQ              reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    NE              reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    SEMI            reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    RPAREN          reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)
    COMMA           reduce using rule 53 (exp -> MINUSMINUS IDENTIFIER .)


state 22

    (75) exp -> STRING .

    PLUS            reduce using rule 75 (exp -> STRING .)
    MINUS           reduce using rule 75 (exp -> STRING .)
    TIMES           reduce using rule 75 (exp -> STRING .)
    DIVIDE          reduce using rule 75 (exp -> STRING .)
    GT              reduce using rule 75 (exp -> STRING .)
    GE              reduce using rule 75 (exp -> STRING .)
    LT              reduce using rule 75 (exp -> STRING .)
    LE              reduce using rule 75 (exp -> STRING .)
    EQ              reduce using rule 75 (exp -> STRING .)
    NE              reduce using rule 75 (exp -> STRING .)
    SEMI            reduce using rule 75 (exp -> STRING .)
    RPAREN          reduce using rule 75 (exp -> STRING .)
    COMMA           reduce using rule 75 (exp -> STRING .)


state 23

    (42) exp -> IDENTIFIER . LPAREN optargs RPAREN
    (49) exp -> IDENTIFIER .
    (50) exp -> IDENTIFIER . LBRACKET INT RBRACKET
    (51) exp -> IDENTIFIER . LBRACKET IDENTIFIER RBRACKET

    LPAREN          shift and go to state 31
    PLUS            reduce using rule 49 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 49 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 49 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 49 (exp -> IDENTIFIER .)
    GT              reduce using rule 49 (exp -> IDENTIFIER .)
    GE              reduce using rule 49 (exp -> IDENTIFIER .)
    LT              reduce using rule 49 (exp -> IDENTIFIER .)
    LE              reduce using rule 49 (exp -> IDENTIFIER .)
    EQ              reduce using rule 49 (exp -> IDENTIFIER .)
    NE              reduce using rule 49 (exp -> IDENTIFIER .)
    SEMI            reduce using rule 49 (exp -> IDENTIFIER .)
    RPAREN          reduce using rule 49 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 49 (exp -> IDENTIFIER .)
    LBRACKET        shift and go to state 60


state 24

    (74) exp -> CHAR .

    PLUS            reduce using rule 74 (exp -> CHAR .)
    MINUS           reduce using rule 74 (exp -> CHAR .)
    TIMES           reduce using rule 74 (exp -> CHAR .)
    DIVIDE          reduce using rule 74 (exp -> CHAR .)
    GT              reduce using rule 74 (exp -> CHAR .)
    GE              reduce using rule 74 (exp -> CHAR .)
    LT              reduce using rule 74 (exp -> CHAR .)
    LE              reduce using rule 74 (exp -> CHAR .)
    EQ              reduce using rule 74 (exp -> CHAR .)
    NE              reduce using rule 74 (exp -> CHAR .)
    SEMI            reduce using rule 74 (exp -> CHAR .)
    RPAREN          reduce using rule 74 (exp -> CHAR .)
    COMMA           reduce using rule 74 (exp -> CHAR .)


state 25

    (47) exp -> INT .

    PLUS            reduce using rule 47 (exp -> INT .)
    MINUS           reduce using rule 47 (exp -> INT .)
    TIMES           reduce using rule 47 (exp -> INT .)
    DIVIDE          reduce using rule 47 (exp -> INT .)
    GT              reduce using rule 47 (exp -> INT .)
    GE              reduce using rule 47 (exp -> INT .)
    LT              reduce using rule 47 (exp -> INT .)
    LE              reduce using rule 47 (exp -> INT .)
    EQ              reduce using rule 47 (exp -> INT .)
    NE              reduce using rule 47 (exp -> INT .)
    SEMI            reduce using rule 47 (exp -> INT .)
    RPAREN          reduce using rule 47 (exp -> INT .)
    COMMA           reduce using rule 47 (exp -> INT .)


state 26

    (48) exp -> DOUBLE .

    PLUS            reduce using rule 48 (exp -> DOUBLE .)
    MINUS           reduce using rule 48 (exp -> DOUBLE .)
    TIMES           reduce using rule 48 (exp -> DOUBLE .)
    DIVIDE          reduce using rule 48 (exp -> DOUBLE .)
    GT              reduce using rule 48 (exp -> DOUBLE .)
    GE              reduce using rule 48 (exp -> DOUBLE .)
    LT              reduce using rule 48 (exp -> DOUBLE .)
    LE              reduce using rule 48 (exp -> DOUBLE .)
    EQ              reduce using rule 48 (exp -> DOUBLE .)
    NE              reduce using rule 48 (exp -> DOUBLE .)
    SEMI            reduce using rule 48 (exp -> DOUBLE .)
    RPAREN          reduce using rule 48 (exp -> DOUBLE .)
    COMMA           reduce using rule 48 (exp -> DOUBLE .)


state 27

    (76) exp -> BOOLEAN .

    PLUS            reduce using rule 76 (exp -> BOOLEAN .)
    MINUS           reduce using rule 76 (exp -> BOOLEAN .)
    TIMES           reduce using rule 76 (exp -> BOOLEAN .)
    DIVIDE          reduce using rule 76 (exp -> BOOLEAN .)
    GT              reduce using rule 76 (exp -> BOOLEAN .)
    GE              reduce using rule 76 (exp -> BOOLEAN .)
    LT              reduce using rule 76 (exp -> BOOLEAN .)
    LE              reduce using rule 76 (exp -> BOOLEAN .)
    EQ              reduce using rule 76 (exp -> BOOLEAN .)
    NE              reduce using rule 76 (exp -> BOOLEAN .)
    SEMI            reduce using rule 76 (exp -> BOOLEAN .)
    RPAREN          reduce using rule 76 (exp -> BOOLEAN .)
    COMMA           reduce using rule 76 (exp -> BOOLEAN .)


state 28

    (17) statement -> RETURN exp . SEMI
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    SEMI            shift and go to state 61
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 29

    (19) statement -> IF LPAREN . exp RPAREN ifstmt
    (20) statement -> IF LPAREN . exp RPAREN ifstmt ELSE elsestmt
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 62

state 30

    (1) java -> element java .

    $end            reduce using rule 1 (java -> element java .)


state 31

    (42) exp -> IDENTIFIER LPAREN . optargs RPAREN
    (43) optargs -> . args
    (44) optargs -> .
    (45) args -> . exp COMMA args
    (46) args -> . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    RPAREN          reduce using rule 44 (optargs -> .)
    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    args                           shift and go to state 64
    exp                            shift and go to state 65
    optargs                        shift and go to state 63

state 32

    (29) statement -> IDENTIFIER EQUALS . exp SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 66

state 33

    (30) statement -> IDENTIFIER LBRACKET . INT RBRACKET EQUALS exp SEMI
    (31) statement -> IDENTIFIER LBRACKET . IDENTIFIER RBRACKET EQUALS exp SEMI
    (50) exp -> IDENTIFIER LBRACKET . INT RBRACKET
    (51) exp -> IDENTIFIER LBRACKET . IDENTIFIER RBRACKET

    INT             shift and go to state 67
    IDENTIFIER      shift and go to state 68


state 34

    (34) statement -> type LBRACKET . RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI

    RBRACKET        shift and go to state 69


state 35

    (32) statement -> type IDENTIFIER . SEMI
    (33) statement -> type IDENTIFIER . EQUALS exp SEMI

    SEMI            shift and go to state 71
    EQUALS          shift and go to state 70


state 36

    (18) statement -> FOR LPAREN . statement exp SEMI exp RPAREN compoundstmt
    (17) statement -> . RETURN exp SEMI
    (18) statement -> . FOR LPAREN statement exp SEMI exp RPAREN compoundstmt
    (19) statement -> . IF LPAREN exp RPAREN ifstmt
    (20) statement -> . IF LPAREN exp RPAREN ifstmt ELSE elsestmt
    (28) statement -> . exp SEMI
    (29) statement -> . IDENTIFIER EQUALS exp SEMI
    (30) statement -> . IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI
    (31) statement -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
    (32) statement -> . type IDENTIFIER SEMI
    (33) statement -> . type IDENTIFIER EQUALS exp SEMI
    (34) statement -> . type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI
    (35) statement -> . SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    RETURN          shift and go to state 2
    FOR             shift and go to state 11
    IF              shift and go to state 4
    IDENTIFIER      shift and go to state 9
    SYSTEM          shift and go to state 16
    INT             shift and go to state 15
    DOUBLE          shift and go to state 20
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 18
    VOID            shift and go to state 3

    statement                      shift and go to state 72
    exp                            shift and go to state 19
    type                           shift and go to state 10

state 37

    (52) exp -> PLUSPLUS IDENTIFIER .

    PLUS            reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    MINUS           reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    TIMES           reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    DIVIDE          reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    GT              reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    GE              reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    LT              reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    LE              reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    EQ              reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    NE              reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    SEMI            reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    RPAREN          reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)
    COMMA           reduce using rule 52 (exp -> PLUSPLUS IDENTIFIER .)


state 38

    (64) exp -> LPAREN exp . PLUS exp RPAREN
    (65) exp -> LPAREN exp . MINUS exp RPAREN
    (66) exp -> LPAREN exp . TIMES exp RPAREN
    (67) exp -> LPAREN exp . DIVIDE exp RPAREN
    (68) exp -> LPAREN exp . GT exp RPAREN
    (69) exp -> LPAREN exp . GE exp RPAREN
    (70) exp -> LPAREN exp . LT exp RPAREN
    (71) exp -> LPAREN exp . LE exp RPAREN
    (72) exp -> LPAREN exp . EQ exp RPAREN
    (73) exp -> LPAREN exp . NE exp RPAREN
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            shift and go to state 78
    MINUS           shift and go to state 80
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 82
    GT              shift and go to state 73
    GE              shift and go to state 76
    LT              shift and go to state 74
    LE              shift and go to state 77
    EQ              shift and go to state 79
    NE              shift and go to state 81


state 39

    (35) statement -> SYSTEM PERIOD . OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI

    OUT             shift and go to state 83


state 40

    (37) type -> DOUBLE .

    IDENTIFIER      reduce using rule 37 (type -> DOUBLE .)
    LBRACKET        reduce using rule 37 (type -> DOUBLE .)


state 41

    (39) type -> STRING .

    IDENTIFIER      reduce using rule 39 (type -> STRING .)
    LBRACKET        reduce using rule 39 (type -> STRING .)


state 42

    (36) type -> INT .

    IDENTIFIER      reduce using rule 36 (type -> INT .)
    LBRACKET        reduce using rule 36 (type -> INT .)


state 43

    (3) element -> PUBLIC CLASS . IDENTIFIER compoundelem

    IDENTIFIER      shift and go to state 84


state 44

    (38) type -> CHAR .

    IDENTIFIER      reduce using rule 38 (type -> CHAR .)
    LBRACKET        reduce using rule 38 (type -> CHAR .)


state 45

    (40) type -> BOOLEAN .

    IDENTIFIER      reduce using rule 40 (type -> BOOLEAN .)
    LBRACKET        reduce using rule 40 (type -> BOOLEAN .)


state 46

    (9) element -> PUBLIC STATIC . return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (10) return_type -> . type
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    INT             shift and go to state 42
    DOUBLE          shift and go to state 40
    CHAR            shift and go to state 44
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 3

    type                           shift and go to state 47
    return_type                    shift and go to state 85

state 47

    (10) return_type -> type .

    IDENTIFIER      reduce using rule 10 (return_type -> type .)


state 48

    (8) element -> PUBLIC return_type . IDENTIFIER LPAREN optparams RPAREN compoundstmt

    IDENTIFIER      shift and go to state 86


state 49

    (58) exp -> exp GT . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 87

state 50

    (57) exp -> exp DIVIDE . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 88

state 51

    (28) statement -> exp SEMI .

    RETURN          reduce using rule 28 (statement -> exp SEMI .)
    FOR             reduce using rule 28 (statement -> exp SEMI .)
    IF              reduce using rule 28 (statement -> exp SEMI .)
    IDENTIFIER      reduce using rule 28 (statement -> exp SEMI .)
    SYSTEM          reduce using rule 28 (statement -> exp SEMI .)
    INT             reduce using rule 28 (statement -> exp SEMI .)
    DOUBLE          reduce using rule 28 (statement -> exp SEMI .)
    PLUSPLUS        reduce using rule 28 (statement -> exp SEMI .)
    MINUSMINUS      reduce using rule 28 (statement -> exp SEMI .)
    LPAREN          reduce using rule 28 (statement -> exp SEMI .)
    CHAR            reduce using rule 28 (statement -> exp SEMI .)
    STRING          reduce using rule 28 (statement -> exp SEMI .)
    BOOLEAN         reduce using rule 28 (statement -> exp SEMI .)
    VOID            reduce using rule 28 (statement -> exp SEMI .)
    RBRACE          reduce using rule 28 (statement -> exp SEMI .)
    PUBLIC          reduce using rule 28 (statement -> exp SEMI .)
    $end            reduce using rule 28 (statement -> exp SEMI .)
    ELSE            reduce using rule 28 (statement -> exp SEMI .)


state 52

    (60) exp -> exp LT . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 89

state 53

    (56) exp -> exp TIMES . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 90

state 54

    (59) exp -> exp GE . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 91

state 55

    (61) exp -> exp LE . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 92

state 56

    (54) exp -> exp PLUS . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 93

state 57

    (62) exp -> exp EQ . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 94

state 58

    (55) exp -> exp MINUS . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 95

state 59

    (63) exp -> exp NE . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 96

state 60

    (50) exp -> IDENTIFIER LBRACKET . INT RBRACKET
    (51) exp -> IDENTIFIER LBRACKET . IDENTIFIER RBRACKET

    INT             shift and go to state 97
    IDENTIFIER      shift and go to state 98


state 61

    (17) statement -> RETURN exp SEMI .

    RETURN          reduce using rule 17 (statement -> RETURN exp SEMI .)
    FOR             reduce using rule 17 (statement -> RETURN exp SEMI .)
    IF              reduce using rule 17 (statement -> RETURN exp SEMI .)
    IDENTIFIER      reduce using rule 17 (statement -> RETURN exp SEMI .)
    SYSTEM          reduce using rule 17 (statement -> RETURN exp SEMI .)
    INT             reduce using rule 17 (statement -> RETURN exp SEMI .)
    DOUBLE          reduce using rule 17 (statement -> RETURN exp SEMI .)
    PLUSPLUS        reduce using rule 17 (statement -> RETURN exp SEMI .)
    MINUSMINUS      reduce using rule 17 (statement -> RETURN exp SEMI .)
    LPAREN          reduce using rule 17 (statement -> RETURN exp SEMI .)
    CHAR            reduce using rule 17 (statement -> RETURN exp SEMI .)
    STRING          reduce using rule 17 (statement -> RETURN exp SEMI .)
    BOOLEAN         reduce using rule 17 (statement -> RETURN exp SEMI .)
    VOID            reduce using rule 17 (statement -> RETURN exp SEMI .)
    RBRACE          reduce using rule 17 (statement -> RETURN exp SEMI .)
    PUBLIC          reduce using rule 17 (statement -> RETURN exp SEMI .)
    $end            reduce using rule 17 (statement -> RETURN exp SEMI .)
    ELSE            reduce using rule 17 (statement -> RETURN exp SEMI .)


state 62

    (19) statement -> IF LPAREN exp . RPAREN ifstmt
    (20) statement -> IF LPAREN exp . RPAREN ifstmt ELSE elsestmt
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 99
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 63

    (42) exp -> IDENTIFIER LPAREN optargs . RPAREN

    RPAREN          shift and go to state 100


state 64

    (43) optargs -> args .

    RPAREN          reduce using rule 43 (optargs -> args .)


state 65

    (45) args -> exp . COMMA args
    (46) args -> exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    COMMA           shift and go to state 101
    RPAREN          reduce using rule 46 (args -> exp .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 66

    (29) statement -> IDENTIFIER EQUALS exp . SEMI
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    SEMI            shift and go to state 102
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 67

    (30) statement -> IDENTIFIER LBRACKET INT . RBRACKET EQUALS exp SEMI
    (50) exp -> IDENTIFIER LBRACKET INT . RBRACKET

    RBRACKET        shift and go to state 103


state 68

    (31) statement -> IDENTIFIER LBRACKET IDENTIFIER . RBRACKET EQUALS exp SEMI
    (51) exp -> IDENTIFIER LBRACKET IDENTIFIER . RBRACKET

    RBRACKET        shift and go to state 104


state 69

    (34) statement -> type LBRACKET RBRACKET . IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI

    IDENTIFIER      shift and go to state 105


state 70

    (33) statement -> type IDENTIFIER EQUALS . exp SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 106

state 71

    (32) statement -> type IDENTIFIER SEMI .

    RETURN          reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    FOR             reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    IF              reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    IDENTIFIER      reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    SYSTEM          reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    INT             reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    DOUBLE          reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    PLUSPLUS        reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    MINUSMINUS      reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    LPAREN          reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    CHAR            reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    STRING          reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    BOOLEAN         reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    VOID            reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    RBRACE          reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    PUBLIC          reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    $end            reduce using rule 32 (statement -> type IDENTIFIER SEMI .)
    ELSE            reduce using rule 32 (statement -> type IDENTIFIER SEMI .)


state 72

    (18) statement -> FOR LPAREN statement . exp SEMI exp RPAREN compoundstmt
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 107

state 73

    (68) exp -> LPAREN exp GT . exp RPAREN
    (58) exp -> exp GT . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 108

state 74

    (70) exp -> LPAREN exp LT . exp RPAREN
    (60) exp -> exp LT . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 109

state 75

    (66) exp -> LPAREN exp TIMES . exp RPAREN
    (56) exp -> exp TIMES . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 110

state 76

    (69) exp -> LPAREN exp GE . exp RPAREN
    (59) exp -> exp GE . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 111

state 77

    (71) exp -> LPAREN exp LE . exp RPAREN
    (61) exp -> exp LE . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 112

state 78

    (64) exp -> LPAREN exp PLUS . exp RPAREN
    (54) exp -> exp PLUS . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 113

state 79

    (72) exp -> LPAREN exp EQ . exp RPAREN
    (62) exp -> exp EQ . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 114

state 80

    (65) exp -> LPAREN exp MINUS . exp RPAREN
    (55) exp -> exp MINUS . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 115

state 81

    (73) exp -> LPAREN exp NE . exp RPAREN
    (63) exp -> exp NE . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 116

state 82

    (67) exp -> LPAREN exp DIVIDE . exp RPAREN
    (57) exp -> exp DIVIDE . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 117

state 83

    (35) statement -> SYSTEM PERIOD OUT . PERIOD PRINTLN LPAREN exp RPAREN SEMI

    PERIOD          shift and go to state 118


state 84

    (3) element -> PUBLIC CLASS IDENTIFIER . compoundelem
    (4) compoundelem -> . LBRACE elements RBRACE

    LBRACE          shift and go to state 119

    compoundelem                   shift and go to state 120

state 85

    (9) element -> PUBLIC STATIC return_type . IDENTIFIER LPAREN optparams RPAREN compoundstmt

    IDENTIFIER      shift and go to state 121


state 86

    (8) element -> PUBLIC return_type IDENTIFIER . LPAREN optparams RPAREN compoundstmt

    LPAREN          shift and go to state 122


state 87

    (58) exp -> exp GT exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            reduce using rule 58 (exp -> exp GT exp .)
    MINUS           reduce using rule 58 (exp -> exp GT exp .)
    TIMES           reduce using rule 58 (exp -> exp GT exp .)
    DIVIDE          reduce using rule 58 (exp -> exp GT exp .)
    GT              reduce using rule 58 (exp -> exp GT exp .)
    GE              reduce using rule 58 (exp -> exp GT exp .)
    LT              reduce using rule 58 (exp -> exp GT exp .)
    LE              reduce using rule 58 (exp -> exp GT exp .)
    EQ              reduce using rule 58 (exp -> exp GT exp .)
    NE              reduce using rule 58 (exp -> exp GT exp .)
    SEMI            reduce using rule 58 (exp -> exp GT exp .)
    RPAREN          reduce using rule 58 (exp -> exp GT exp .)
    COMMA           reduce using rule 58 (exp -> exp GT exp .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! GT              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 52 ]
  ! LE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 88

    (57) exp -> exp DIVIDE exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            reduce using rule 57 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 57 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 57 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 57 (exp -> exp DIVIDE exp .)
    SEMI            reduce using rule 57 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 57 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 57 (exp -> exp DIVIDE exp .)
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59

  ! GT              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! GE              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! LT              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! LE              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! EQ              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! NE              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]


state 89

    (60) exp -> exp LT exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            reduce using rule 60 (exp -> exp LT exp .)
    MINUS           reduce using rule 60 (exp -> exp LT exp .)
    TIMES           reduce using rule 60 (exp -> exp LT exp .)
    DIVIDE          reduce using rule 60 (exp -> exp LT exp .)
    GT              reduce using rule 60 (exp -> exp LT exp .)
    GE              reduce using rule 60 (exp -> exp LT exp .)
    LT              reduce using rule 60 (exp -> exp LT exp .)
    LE              reduce using rule 60 (exp -> exp LT exp .)
    EQ              reduce using rule 60 (exp -> exp LT exp .)
    NE              reduce using rule 60 (exp -> exp LT exp .)
    SEMI            reduce using rule 60 (exp -> exp LT exp .)
    RPAREN          reduce using rule 60 (exp -> exp LT exp .)
    COMMA           reduce using rule 60 (exp -> exp LT exp .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! GT              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 52 ]
  ! LE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 90

    (56) exp -> exp TIMES exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            reduce using rule 56 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 56 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 56 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 56 (exp -> exp TIMES exp .)
    SEMI            reduce using rule 56 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 56 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 56 (exp -> exp TIMES exp .)
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59

  ! GT              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! GE              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! LT              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! LE              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! EQ              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! NE              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]


state 91

    (59) exp -> exp GE exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            reduce using rule 59 (exp -> exp GE exp .)
    MINUS           reduce using rule 59 (exp -> exp GE exp .)
    TIMES           reduce using rule 59 (exp -> exp GE exp .)
    DIVIDE          reduce using rule 59 (exp -> exp GE exp .)
    GT              reduce using rule 59 (exp -> exp GE exp .)
    GE              reduce using rule 59 (exp -> exp GE exp .)
    LT              reduce using rule 59 (exp -> exp GE exp .)
    LE              reduce using rule 59 (exp -> exp GE exp .)
    EQ              reduce using rule 59 (exp -> exp GE exp .)
    NE              reduce using rule 59 (exp -> exp GE exp .)
    SEMI            reduce using rule 59 (exp -> exp GE exp .)
    RPAREN          reduce using rule 59 (exp -> exp GE exp .)
    COMMA           reduce using rule 59 (exp -> exp GE exp .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! GT              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 52 ]
  ! LE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 92

    (61) exp -> exp LE exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            reduce using rule 61 (exp -> exp LE exp .)
    MINUS           reduce using rule 61 (exp -> exp LE exp .)
    TIMES           reduce using rule 61 (exp -> exp LE exp .)
    DIVIDE          reduce using rule 61 (exp -> exp LE exp .)
    GT              reduce using rule 61 (exp -> exp LE exp .)
    GE              reduce using rule 61 (exp -> exp LE exp .)
    LT              reduce using rule 61 (exp -> exp LE exp .)
    LE              reduce using rule 61 (exp -> exp LE exp .)
    EQ              reduce using rule 61 (exp -> exp LE exp .)
    NE              reduce using rule 61 (exp -> exp LE exp .)
    SEMI            reduce using rule 61 (exp -> exp LE exp .)
    RPAREN          reduce using rule 61 (exp -> exp LE exp .)
    COMMA           reduce using rule 61 (exp -> exp LE exp .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! GT              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 52 ]
  ! LE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 93

    (54) exp -> exp PLUS exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            reduce using rule 54 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 54 (exp -> exp PLUS exp .)
    SEMI            reduce using rule 54 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 54 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 54 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59

  ! TIMES           [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! GT              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! GE              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! LT              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! LE              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! EQ              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! NE              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]


state 94

    (62) exp -> exp EQ exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            reduce using rule 62 (exp -> exp EQ exp .)
    MINUS           reduce using rule 62 (exp -> exp EQ exp .)
    TIMES           reduce using rule 62 (exp -> exp EQ exp .)
    DIVIDE          reduce using rule 62 (exp -> exp EQ exp .)
    EQ              reduce using rule 62 (exp -> exp EQ exp .)
    NE              reduce using rule 62 (exp -> exp EQ exp .)
    SEMI            reduce using rule 62 (exp -> exp EQ exp .)
    RPAREN          reduce using rule 62 (exp -> exp EQ exp .)
    COMMA           reduce using rule 62 (exp -> exp EQ exp .)
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55

  ! GT              [ reduce using rule 62 (exp -> exp EQ exp .) ]
  ! GE              [ reduce using rule 62 (exp -> exp EQ exp .) ]
  ! LT              [ reduce using rule 62 (exp -> exp EQ exp .) ]
  ! LE              [ reduce using rule 62 (exp -> exp EQ exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 95

    (55) exp -> exp MINUS exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            reduce using rule 55 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 55 (exp -> exp MINUS exp .)
    SEMI            reduce using rule 55 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 55 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 55 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59

  ! TIMES           [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! GT              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! GE              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! LT              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! LE              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! EQ              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! NE              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]


state 96

    (63) exp -> exp NE exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    PLUS            reduce using rule 63 (exp -> exp NE exp .)
    MINUS           reduce using rule 63 (exp -> exp NE exp .)
    TIMES           reduce using rule 63 (exp -> exp NE exp .)
    DIVIDE          reduce using rule 63 (exp -> exp NE exp .)
    EQ              reduce using rule 63 (exp -> exp NE exp .)
    NE              reduce using rule 63 (exp -> exp NE exp .)
    SEMI            reduce using rule 63 (exp -> exp NE exp .)
    RPAREN          reduce using rule 63 (exp -> exp NE exp .)
    COMMA           reduce using rule 63 (exp -> exp NE exp .)
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55

  ! GT              [ reduce using rule 63 (exp -> exp NE exp .) ]
  ! GE              [ reduce using rule 63 (exp -> exp NE exp .) ]
  ! LT              [ reduce using rule 63 (exp -> exp NE exp .) ]
  ! LE              [ reduce using rule 63 (exp -> exp NE exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 97

    (50) exp -> IDENTIFIER LBRACKET INT . RBRACKET

    RBRACKET        shift and go to state 123


state 98

    (51) exp -> IDENTIFIER LBRACKET IDENTIFIER . RBRACKET

    RBRACKET        shift and go to state 124


state 99

    (19) statement -> IF LPAREN exp RPAREN . ifstmt
    (20) statement -> IF LPAREN exp RPAREN . ifstmt ELSE elsestmt
    (21) ifstmt -> . statement
    (22) ifstmt -> . compoundstmt
    (17) statement -> . RETURN exp SEMI
    (18) statement -> . FOR LPAREN statement exp SEMI exp RPAREN compoundstmt
    (19) statement -> . IF LPAREN exp RPAREN ifstmt
    (20) statement -> . IF LPAREN exp RPAREN ifstmt ELSE elsestmt
    (28) statement -> . exp SEMI
    (29) statement -> . IDENTIFIER EQUALS exp SEMI
    (30) statement -> . IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI
    (31) statement -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
    (32) statement -> . type IDENTIFIER SEMI
    (33) statement -> . type IDENTIFIER EQUALS exp SEMI
    (34) statement -> . type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI
    (35) statement -> . SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI
    (23) compoundstmt -> . LBRACE statements RBRACE
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    RETURN          shift and go to state 2
    FOR             shift and go to state 11
    IF              shift and go to state 4
    IDENTIFIER      shift and go to state 9
    SYSTEM          shift and go to state 16
    LBRACE          shift and go to state 127
    INT             shift and go to state 15
    DOUBLE          shift and go to state 20
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 18
    VOID            shift and go to state 3

    exp                            shift and go to state 19
    ifstmt                         shift and go to state 125
    statement                      shift and go to state 126
    type                           shift and go to state 10
    compoundstmt                   shift and go to state 128

state 100

    (42) exp -> IDENTIFIER LPAREN optargs RPAREN .

    PLUS            reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MINUS           reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    TIMES           reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GT              reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GE              reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LT              reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LE              reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    EQ              reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    NE              reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    SEMI            reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    COMMA           reduce using rule 42 (exp -> IDENTIFIER LPAREN optargs RPAREN .)


state 101

    (45) args -> exp COMMA . args
    (45) args -> . exp COMMA args
    (46) args -> . exp
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    args                           shift and go to state 129
    exp                            shift and go to state 65

state 102

    (29) statement -> IDENTIFIER EQUALS exp SEMI .

    RETURN          reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    FOR             reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    IF              reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    IDENTIFIER      reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    SYSTEM          reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    INT             reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    DOUBLE          reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    PLUSPLUS        reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    MINUSMINUS      reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    LPAREN          reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    CHAR            reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    STRING          reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    BOOLEAN         reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    VOID            reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    RBRACE          reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    PUBLIC          reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    $end            reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)
    ELSE            reduce using rule 29 (statement -> IDENTIFIER EQUALS exp SEMI .)


state 103

    (30) statement -> IDENTIFIER LBRACKET INT RBRACKET . EQUALS exp SEMI
    (50) exp -> IDENTIFIER LBRACKET INT RBRACKET .

    EQUALS          shift and go to state 130
    SEMI            reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    PLUS            reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    MINUS           reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    TIMES           reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    DIVIDE          reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    GT              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    GE              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    LT              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    LE              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    EQ              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    NE              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)


state 104

    (31) statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET . EQUALS exp SEMI
    (51) exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .

    EQUALS          shift and go to state 131
    SEMI            reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    PLUS            reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    MINUS           reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    TIMES           reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    DIVIDE          reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    GT              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    GE              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    LT              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    LE              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    EQ              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    NE              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)


state 105

    (34) statement -> type LBRACKET RBRACKET IDENTIFIER . EQUALS NEW type LBRACKET INT RBRACKET SEMI

    EQUALS          shift and go to state 132


state 106

    (33) statement -> type IDENTIFIER EQUALS exp . SEMI
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    SEMI            shift and go to state 133
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 107

    (18) statement -> FOR LPAREN statement exp . SEMI exp RPAREN compoundstmt
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    SEMI            shift and go to state 134
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 108

    (68) exp -> LPAREN exp GT exp . RPAREN
    (58) exp -> exp GT exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 135
    PLUS            reduce using rule 58 (exp -> exp GT exp .)
    MINUS           reduce using rule 58 (exp -> exp GT exp .)
    TIMES           reduce using rule 58 (exp -> exp GT exp .)
    DIVIDE          reduce using rule 58 (exp -> exp GT exp .)
    GT              reduce using rule 58 (exp -> exp GT exp .)
    GE              reduce using rule 58 (exp -> exp GT exp .)
    LT              reduce using rule 58 (exp -> exp GT exp .)
    LE              reduce using rule 58 (exp -> exp GT exp .)
    EQ              reduce using rule 58 (exp -> exp GT exp .)
    NE              reduce using rule 58 (exp -> exp GT exp .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! GT              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 52 ]
  ! LE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 109

    (70) exp -> LPAREN exp LT exp . RPAREN
    (60) exp -> exp LT exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 136
    PLUS            reduce using rule 60 (exp -> exp LT exp .)
    MINUS           reduce using rule 60 (exp -> exp LT exp .)
    TIMES           reduce using rule 60 (exp -> exp LT exp .)
    DIVIDE          reduce using rule 60 (exp -> exp LT exp .)
    GT              reduce using rule 60 (exp -> exp LT exp .)
    GE              reduce using rule 60 (exp -> exp LT exp .)
    LT              reduce using rule 60 (exp -> exp LT exp .)
    LE              reduce using rule 60 (exp -> exp LT exp .)
    EQ              reduce using rule 60 (exp -> exp LT exp .)
    NE              reduce using rule 60 (exp -> exp LT exp .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! GT              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 52 ]
  ! LE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 110

    (66) exp -> LPAREN exp TIMES exp . RPAREN
    (56) exp -> exp TIMES exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 137
    PLUS            reduce using rule 56 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 56 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 56 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 56 (exp -> exp TIMES exp .)
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59

  ! GT              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! GE              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! LT              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! LE              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! EQ              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! NE              [ reduce using rule 56 (exp -> exp TIMES exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]


state 111

    (69) exp -> LPAREN exp GE exp . RPAREN
    (59) exp -> exp GE exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 138
    PLUS            reduce using rule 59 (exp -> exp GE exp .)
    MINUS           reduce using rule 59 (exp -> exp GE exp .)
    TIMES           reduce using rule 59 (exp -> exp GE exp .)
    DIVIDE          reduce using rule 59 (exp -> exp GE exp .)
    GT              reduce using rule 59 (exp -> exp GE exp .)
    GE              reduce using rule 59 (exp -> exp GE exp .)
    LT              reduce using rule 59 (exp -> exp GE exp .)
    LE              reduce using rule 59 (exp -> exp GE exp .)
    EQ              reduce using rule 59 (exp -> exp GE exp .)
    NE              reduce using rule 59 (exp -> exp GE exp .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! GT              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 52 ]
  ! LE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 112

    (71) exp -> LPAREN exp LE exp . RPAREN
    (61) exp -> exp LE exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 139
    PLUS            reduce using rule 61 (exp -> exp LE exp .)
    MINUS           reduce using rule 61 (exp -> exp LE exp .)
    TIMES           reduce using rule 61 (exp -> exp LE exp .)
    DIVIDE          reduce using rule 61 (exp -> exp LE exp .)
    GT              reduce using rule 61 (exp -> exp LE exp .)
    GE              reduce using rule 61 (exp -> exp LE exp .)
    LT              reduce using rule 61 (exp -> exp LE exp .)
    LE              reduce using rule 61 (exp -> exp LE exp .)
    EQ              reduce using rule 61 (exp -> exp LE exp .)
    NE              reduce using rule 61 (exp -> exp LE exp .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! GT              [ shift and go to state 49 ]
  ! GE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 52 ]
  ! LE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 113

    (64) exp -> LPAREN exp PLUS exp . RPAREN
    (54) exp -> exp PLUS exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 140
    PLUS            reduce using rule 54 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 54 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59

  ! TIMES           [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! GT              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! GE              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! LT              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! LE              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! EQ              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! NE              [ reduce using rule 54 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]


state 114

    (72) exp -> LPAREN exp EQ exp . RPAREN
    (62) exp -> exp EQ exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 141
    PLUS            reduce using rule 62 (exp -> exp EQ exp .)
    MINUS           reduce using rule 62 (exp -> exp EQ exp .)
    TIMES           reduce using rule 62 (exp -> exp EQ exp .)
    DIVIDE          reduce using rule 62 (exp -> exp EQ exp .)
    EQ              reduce using rule 62 (exp -> exp EQ exp .)
    NE              reduce using rule 62 (exp -> exp EQ exp .)
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55

  ! GT              [ reduce using rule 62 (exp -> exp EQ exp .) ]
  ! GE              [ reduce using rule 62 (exp -> exp EQ exp .) ]
  ! LT              [ reduce using rule 62 (exp -> exp EQ exp .) ]
  ! LE              [ reduce using rule 62 (exp -> exp EQ exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 115

    (65) exp -> LPAREN exp MINUS exp . RPAREN
    (55) exp -> exp MINUS exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 142
    PLUS            reduce using rule 55 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 55 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59

  ! TIMES           [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! GT              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! GE              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! LT              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! LE              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! EQ              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! NE              [ reduce using rule 55 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]


state 116

    (73) exp -> LPAREN exp NE exp . RPAREN
    (63) exp -> exp NE exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 143
    PLUS            reduce using rule 63 (exp -> exp NE exp .)
    MINUS           reduce using rule 63 (exp -> exp NE exp .)
    TIMES           reduce using rule 63 (exp -> exp NE exp .)
    DIVIDE          reduce using rule 63 (exp -> exp NE exp .)
    EQ              reduce using rule 63 (exp -> exp NE exp .)
    NE              reduce using rule 63 (exp -> exp NE exp .)
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55

  ! GT              [ reduce using rule 63 (exp -> exp NE exp .) ]
  ! GE              [ reduce using rule 63 (exp -> exp NE exp .) ]
  ! LT              [ reduce using rule 63 (exp -> exp NE exp .) ]
  ! LE              [ reduce using rule 63 (exp -> exp NE exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 59 ]


state 117

    (67) exp -> LPAREN exp DIVIDE exp . RPAREN
    (57) exp -> exp DIVIDE exp .
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 144
    PLUS            reduce using rule 57 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 57 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 57 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 57 (exp -> exp DIVIDE exp .)
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59

  ! GT              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! GE              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! LT              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! LE              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! EQ              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! NE              [ reduce using rule 57 (exp -> exp DIVIDE exp .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 58 ]
  ! TIMES           [ shift and go to state 53 ]
  ! DIVIDE          [ shift and go to state 50 ]


state 118

    (35) statement -> SYSTEM PERIOD OUT PERIOD . PRINTLN LPAREN exp RPAREN SEMI

    PRINTLN         shift and go to state 145


state 119

    (4) compoundelem -> LBRACE . elements RBRACE
    (5) elements -> . element elements
    (6) elements -> .
    (3) element -> . PUBLIC CLASS IDENTIFIER compoundelem
    (7) element -> . statement
    (8) element -> . PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (9) element -> . PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (17) statement -> . RETURN exp SEMI
    (18) statement -> . FOR LPAREN statement exp SEMI exp RPAREN compoundstmt
    (19) statement -> . IF LPAREN exp RPAREN ifstmt
    (20) statement -> . IF LPAREN exp RPAREN ifstmt ELSE elsestmt
    (28) statement -> . exp SEMI
    (29) statement -> . IDENTIFIER EQUALS exp SEMI
    (30) statement -> . IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI
    (31) statement -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
    (32) statement -> . type IDENTIFIER SEMI
    (33) statement -> . type IDENTIFIER EQUALS exp SEMI
    (34) statement -> . type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI
    (35) statement -> . SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    RBRACE          reduce using rule 6 (elements -> .)
    PUBLIC          shift and go to state 17
    RETURN          shift and go to state 2
    FOR             shift and go to state 11
    IF              shift and go to state 4
    IDENTIFIER      shift and go to state 9
    SYSTEM          shift and go to state 16
    INT             shift and go to state 15
    DOUBLE          shift and go to state 20
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 18
    VOID            shift and go to state 3

    elements                       shift and go to state 146
    exp                            shift and go to state 19
    type                           shift and go to state 10
    element                        shift and go to state 147
    statement                      shift and go to state 7

state 120

    (3) element -> PUBLIC CLASS IDENTIFIER compoundelem .

    PUBLIC          reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    RETURN          reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    FOR             reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    IF              reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    IDENTIFIER      reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    SYSTEM          reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    INT             reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    DOUBLE          reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    PLUSPLUS        reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    MINUSMINUS      reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    LPAREN          reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    CHAR            reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    STRING          reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    BOOLEAN         reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    VOID            reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    RBRACE          reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)
    $end            reduce using rule 3 (element -> PUBLIC CLASS IDENTIFIER compoundelem .)


state 121

    (9) element -> PUBLIC STATIC return_type IDENTIFIER . LPAREN optparams RPAREN compoundstmt

    LPAREN          shift and go to state 148


state 122

    (8) element -> PUBLIC return_type IDENTIFIER LPAREN . optparams RPAREN compoundstmt
    (11) optparams -> . params
    (12) optparams -> .
    (13) params -> . type IDENTIFIER COMMA params
    (14) params -> . type LBRACKET RBRACKET IDENTIFIER COMMA params
    (15) params -> . type IDENTIFIER
    (16) params -> . type LBRACKET RBRACKET IDENTIFIER
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    RPAREN          reduce using rule 12 (optparams -> .)
    INT             shift and go to state 42
    DOUBLE          shift and go to state 40
    CHAR            shift and go to state 44
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 3

    params                         shift and go to state 150
    optparams                      shift and go to state 151
    type                           shift and go to state 149

state 123

    (50) exp -> IDENTIFIER LBRACKET INT RBRACKET .

    PLUS            reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    MINUS           reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    TIMES           reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    DIVIDE          reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    GT              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    GE              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    LT              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    LE              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    EQ              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    NE              reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    SEMI            reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    RPAREN          reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)
    COMMA           reduce using rule 50 (exp -> IDENTIFIER LBRACKET INT RBRACKET .)


state 124

    (51) exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .

    PLUS            reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    MINUS           reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    TIMES           reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    DIVIDE          reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    GT              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    GE              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    LT              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    LE              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    EQ              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    NE              reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    SEMI            reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    RPAREN          reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)
    COMMA           reduce using rule 51 (exp -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET .)


state 125

    (19) statement -> IF LPAREN exp RPAREN ifstmt .
    (20) statement -> IF LPAREN exp RPAREN ifstmt . ELSE elsestmt

  ! shift/reduce conflict for ELSE resolved as shift
    RETURN          reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    FOR             reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    IF              reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    IDENTIFIER      reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    SYSTEM          reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    INT             reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    DOUBLE          reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    PLUSPLUS        reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    MINUSMINUS      reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    LPAREN          reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    CHAR            reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    STRING          reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    BOOLEAN         reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    VOID            reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    RBRACE          reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    PUBLIC          reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    $end            reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .)
    ELSE            shift and go to state 152

  ! ELSE            [ reduce using rule 19 (statement -> IF LPAREN exp RPAREN ifstmt .) ]


state 126

    (21) ifstmt -> statement .

    ELSE            reduce using rule 21 (ifstmt -> statement .)
    PUBLIC          reduce using rule 21 (ifstmt -> statement .)
    RETURN          reduce using rule 21 (ifstmt -> statement .)
    FOR             reduce using rule 21 (ifstmt -> statement .)
    IF              reduce using rule 21 (ifstmt -> statement .)
    IDENTIFIER      reduce using rule 21 (ifstmt -> statement .)
    SYSTEM          reduce using rule 21 (ifstmt -> statement .)
    INT             reduce using rule 21 (ifstmt -> statement .)
    DOUBLE          reduce using rule 21 (ifstmt -> statement .)
    PLUSPLUS        reduce using rule 21 (ifstmt -> statement .)
    MINUSMINUS      reduce using rule 21 (ifstmt -> statement .)
    LPAREN          reduce using rule 21 (ifstmt -> statement .)
    CHAR            reduce using rule 21 (ifstmt -> statement .)
    STRING          reduce using rule 21 (ifstmt -> statement .)
    BOOLEAN         reduce using rule 21 (ifstmt -> statement .)
    VOID            reduce using rule 21 (ifstmt -> statement .)
    $end            reduce using rule 21 (ifstmt -> statement .)
    RBRACE          reduce using rule 21 (ifstmt -> statement .)


state 127

    (23) compoundstmt -> LBRACE . statements RBRACE
    (24) statements -> . statement statements
    (25) statements -> .
    (17) statement -> . RETURN exp SEMI
    (18) statement -> . FOR LPAREN statement exp SEMI exp RPAREN compoundstmt
    (19) statement -> . IF LPAREN exp RPAREN ifstmt
    (20) statement -> . IF LPAREN exp RPAREN ifstmt ELSE elsestmt
    (28) statement -> . exp SEMI
    (29) statement -> . IDENTIFIER EQUALS exp SEMI
    (30) statement -> . IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI
    (31) statement -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
    (32) statement -> . type IDENTIFIER SEMI
    (33) statement -> . type IDENTIFIER EQUALS exp SEMI
    (34) statement -> . type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI
    (35) statement -> . SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    RBRACE          reduce using rule 25 (statements -> .)
    RETURN          shift and go to state 2
    FOR             shift and go to state 11
    IF              shift and go to state 4
    IDENTIFIER      shift and go to state 9
    SYSTEM          shift and go to state 16
    INT             shift and go to state 15
    DOUBLE          shift and go to state 20
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 18
    VOID            shift and go to state 3

    statements                     shift and go to state 154
    statement                      shift and go to state 153
    exp                            shift and go to state 19
    type                           shift and go to state 10

state 128

    (22) ifstmt -> compoundstmt .

    ELSE            reduce using rule 22 (ifstmt -> compoundstmt .)
    PUBLIC          reduce using rule 22 (ifstmt -> compoundstmt .)
    RETURN          reduce using rule 22 (ifstmt -> compoundstmt .)
    FOR             reduce using rule 22 (ifstmt -> compoundstmt .)
    IF              reduce using rule 22 (ifstmt -> compoundstmt .)
    IDENTIFIER      reduce using rule 22 (ifstmt -> compoundstmt .)
    SYSTEM          reduce using rule 22 (ifstmt -> compoundstmt .)
    INT             reduce using rule 22 (ifstmt -> compoundstmt .)
    DOUBLE          reduce using rule 22 (ifstmt -> compoundstmt .)
    PLUSPLUS        reduce using rule 22 (ifstmt -> compoundstmt .)
    MINUSMINUS      reduce using rule 22 (ifstmt -> compoundstmt .)
    LPAREN          reduce using rule 22 (ifstmt -> compoundstmt .)
    CHAR            reduce using rule 22 (ifstmt -> compoundstmt .)
    STRING          reduce using rule 22 (ifstmt -> compoundstmt .)
    BOOLEAN         reduce using rule 22 (ifstmt -> compoundstmt .)
    VOID            reduce using rule 22 (ifstmt -> compoundstmt .)
    $end            reduce using rule 22 (ifstmt -> compoundstmt .)
    RBRACE          reduce using rule 22 (ifstmt -> compoundstmt .)


state 129

    (45) args -> exp COMMA args .

    RPAREN          reduce using rule 45 (args -> exp COMMA args .)


state 130

    (30) statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS . exp SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 155

state 131

    (31) statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS . exp SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 156

state 132

    (34) statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS . NEW type LBRACKET INT RBRACKET SEMI

    NEW             shift and go to state 157


state 133

    (33) statement -> type IDENTIFIER EQUALS exp SEMI .

    RETURN          reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    FOR             reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    IF              reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    IDENTIFIER      reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    SYSTEM          reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    INT             reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    DOUBLE          reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    PLUSPLUS        reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    MINUSMINUS      reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    LPAREN          reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    CHAR            reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    STRING          reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    BOOLEAN         reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    VOID            reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    RBRACE          reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    PUBLIC          reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    $end            reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)
    ELSE            reduce using rule 33 (statement -> type IDENTIFIER EQUALS exp SEMI .)


state 134

    (18) statement -> FOR LPAREN statement exp SEMI . exp RPAREN compoundstmt
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 158

state 135

    (68) exp -> LPAREN exp GT exp RPAREN .

    PLUS            reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    MINUS           reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    TIMES           reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    DIVIDE          reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    GT              reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    GE              reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    LT              reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    LE              reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    EQ              reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    NE              reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    SEMI            reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    RPAREN          reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)
    COMMA           reduce using rule 68 (exp -> LPAREN exp GT exp RPAREN .)


state 136

    (70) exp -> LPAREN exp LT exp RPAREN .

    PLUS            reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    MINUS           reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    TIMES           reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    DIVIDE          reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    GT              reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    GE              reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    LT              reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    LE              reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    EQ              reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    NE              reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    SEMI            reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    RPAREN          reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)
    COMMA           reduce using rule 70 (exp -> LPAREN exp LT exp RPAREN .)


state 137

    (66) exp -> LPAREN exp TIMES exp RPAREN .

    PLUS            reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    MINUS           reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    TIMES           reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    DIVIDE          reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    GT              reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    GE              reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    LT              reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    LE              reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    EQ              reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    NE              reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    SEMI            reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    RPAREN          reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)
    COMMA           reduce using rule 66 (exp -> LPAREN exp TIMES exp RPAREN .)


state 138

    (69) exp -> LPAREN exp GE exp RPAREN .

    PLUS            reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    MINUS           reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    TIMES           reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    DIVIDE          reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    GT              reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    GE              reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    LT              reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    LE              reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    EQ              reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    NE              reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    SEMI            reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    RPAREN          reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)
    COMMA           reduce using rule 69 (exp -> LPAREN exp GE exp RPAREN .)


state 139

    (71) exp -> LPAREN exp LE exp RPAREN .

    PLUS            reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    MINUS           reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    TIMES           reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    DIVIDE          reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    GT              reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    GE              reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    LT              reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    LE              reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    EQ              reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    NE              reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    SEMI            reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    RPAREN          reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)
    COMMA           reduce using rule 71 (exp -> LPAREN exp LE exp RPAREN .)


state 140

    (64) exp -> LPAREN exp PLUS exp RPAREN .

    PLUS            reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    MINUS           reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    TIMES           reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    DIVIDE          reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    GT              reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    GE              reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    LT              reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    LE              reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    EQ              reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    NE              reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    SEMI            reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    RPAREN          reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)
    COMMA           reduce using rule 64 (exp -> LPAREN exp PLUS exp RPAREN .)


state 141

    (72) exp -> LPAREN exp EQ exp RPAREN .

    PLUS            reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    MINUS           reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    TIMES           reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    DIVIDE          reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    GT              reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    GE              reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    LT              reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    LE              reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    EQ              reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    NE              reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    SEMI            reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    RPAREN          reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)
    COMMA           reduce using rule 72 (exp -> LPAREN exp EQ exp RPAREN .)


state 142

    (65) exp -> LPAREN exp MINUS exp RPAREN .

    PLUS            reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    MINUS           reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    TIMES           reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    DIVIDE          reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    GT              reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    GE              reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    LT              reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    LE              reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    EQ              reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    NE              reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    SEMI            reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    RPAREN          reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)
    COMMA           reduce using rule 65 (exp -> LPAREN exp MINUS exp RPAREN .)


state 143

    (73) exp -> LPAREN exp NE exp RPAREN .

    PLUS            reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    MINUS           reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    TIMES           reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    DIVIDE          reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    GT              reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    GE              reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    LT              reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    LE              reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    EQ              reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    NE              reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    SEMI            reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    RPAREN          reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)
    COMMA           reduce using rule 73 (exp -> LPAREN exp NE exp RPAREN .)


state 144

    (67) exp -> LPAREN exp DIVIDE exp RPAREN .

    PLUS            reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    MINUS           reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    TIMES           reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    DIVIDE          reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    GT              reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    GE              reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    LT              reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    LE              reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    EQ              reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    NE              reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    SEMI            reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    RPAREN          reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)
    COMMA           reduce using rule 67 (exp -> LPAREN exp DIVIDE exp RPAREN .)


state 145

    (35) statement -> SYSTEM PERIOD OUT PERIOD PRINTLN . LPAREN exp RPAREN SEMI

    LPAREN          shift and go to state 159


state 146

    (4) compoundelem -> LBRACE elements . RBRACE

    RBRACE          shift and go to state 160


state 147

    (5) elements -> element . elements
    (5) elements -> . element elements
    (6) elements -> .
    (3) element -> . PUBLIC CLASS IDENTIFIER compoundelem
    (7) element -> . statement
    (8) element -> . PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (9) element -> . PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (17) statement -> . RETURN exp SEMI
    (18) statement -> . FOR LPAREN statement exp SEMI exp RPAREN compoundstmt
    (19) statement -> . IF LPAREN exp RPAREN ifstmt
    (20) statement -> . IF LPAREN exp RPAREN ifstmt ELSE elsestmt
    (28) statement -> . exp SEMI
    (29) statement -> . IDENTIFIER EQUALS exp SEMI
    (30) statement -> . IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI
    (31) statement -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
    (32) statement -> . type IDENTIFIER SEMI
    (33) statement -> . type IDENTIFIER EQUALS exp SEMI
    (34) statement -> . type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI
    (35) statement -> . SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    RBRACE          reduce using rule 6 (elements -> .)
    PUBLIC          shift and go to state 17
    RETURN          shift and go to state 2
    FOR             shift and go to state 11
    IF              shift and go to state 4
    IDENTIFIER      shift and go to state 9
    SYSTEM          shift and go to state 16
    INT             shift and go to state 15
    DOUBLE          shift and go to state 20
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 18
    VOID            shift and go to state 3

    elements                       shift and go to state 161
    exp                            shift and go to state 19
    type                           shift and go to state 10
    element                        shift and go to state 147
    statement                      shift and go to state 7

state 148

    (9) element -> PUBLIC STATIC return_type IDENTIFIER LPAREN . optparams RPAREN compoundstmt
    (11) optparams -> . params
    (12) optparams -> .
    (13) params -> . type IDENTIFIER COMMA params
    (14) params -> . type LBRACKET RBRACKET IDENTIFIER COMMA params
    (15) params -> . type IDENTIFIER
    (16) params -> . type LBRACKET RBRACKET IDENTIFIER
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    RPAREN          reduce using rule 12 (optparams -> .)
    INT             shift and go to state 42
    DOUBLE          shift and go to state 40
    CHAR            shift and go to state 44
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 3

    params                         shift and go to state 150
    optparams                      shift and go to state 162
    type                           shift and go to state 149

state 149

    (13) params -> type . IDENTIFIER COMMA params
    (14) params -> type . LBRACKET RBRACKET IDENTIFIER COMMA params
    (15) params -> type . IDENTIFIER
    (16) params -> type . LBRACKET RBRACKET IDENTIFIER

    IDENTIFIER      shift and go to state 164
    LBRACKET        shift and go to state 163


state 150

    (11) optparams -> params .

    RPAREN          reduce using rule 11 (optparams -> params .)


state 151

    (8) element -> PUBLIC return_type IDENTIFIER LPAREN optparams . RPAREN compoundstmt

    RPAREN          shift and go to state 165


state 152

    (20) statement -> IF LPAREN exp RPAREN ifstmt ELSE . elsestmt
    (26) elsestmt -> . statement
    (27) elsestmt -> . compoundstmt
    (17) statement -> . RETURN exp SEMI
    (18) statement -> . FOR LPAREN statement exp SEMI exp RPAREN compoundstmt
    (19) statement -> . IF LPAREN exp RPAREN ifstmt
    (20) statement -> . IF LPAREN exp RPAREN ifstmt ELSE elsestmt
    (28) statement -> . exp SEMI
    (29) statement -> . IDENTIFIER EQUALS exp SEMI
    (30) statement -> . IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI
    (31) statement -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
    (32) statement -> . type IDENTIFIER SEMI
    (33) statement -> . type IDENTIFIER EQUALS exp SEMI
    (34) statement -> . type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI
    (35) statement -> . SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI
    (23) compoundstmt -> . LBRACE statements RBRACE
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    RETURN          shift and go to state 2
    FOR             shift and go to state 11
    IF              shift and go to state 4
    IDENTIFIER      shift and go to state 9
    SYSTEM          shift and go to state 16
    LBRACE          shift and go to state 127
    INT             shift and go to state 15
    DOUBLE          shift and go to state 20
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 18
    VOID            shift and go to state 3

    exp                            shift and go to state 19
    statement                      shift and go to state 166
    type                           shift and go to state 10
    compoundstmt                   shift and go to state 168
    elsestmt                       shift and go to state 167

state 153

    (24) statements -> statement . statements
    (24) statements -> . statement statements
    (25) statements -> .
    (17) statement -> . RETURN exp SEMI
    (18) statement -> . FOR LPAREN statement exp SEMI exp RPAREN compoundstmt
    (19) statement -> . IF LPAREN exp RPAREN ifstmt
    (20) statement -> . IF LPAREN exp RPAREN ifstmt ELSE elsestmt
    (28) statement -> . exp SEMI
    (29) statement -> . IDENTIFIER EQUALS exp SEMI
    (30) statement -> . IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI
    (31) statement -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI
    (32) statement -> . type IDENTIFIER SEMI
    (33) statement -> . type IDENTIFIER EQUALS exp SEMI
    (34) statement -> . type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI
    (35) statement -> . SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    RBRACE          reduce using rule 25 (statements -> .)
    RETURN          shift and go to state 2
    FOR             shift and go to state 11
    IF              shift and go to state 4
    IDENTIFIER      shift and go to state 9
    SYSTEM          shift and go to state 16
    INT             shift and go to state 15
    DOUBLE          shift and go to state 20
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 8
    BOOLEAN         shift and go to state 18
    VOID            shift and go to state 3

    statements                     shift and go to state 169
    statement                      shift and go to state 153
    exp                            shift and go to state 19
    type                           shift and go to state 10

state 154

    (23) compoundstmt -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 170


state 155

    (30) statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp . SEMI
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    SEMI            shift and go to state 171
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 156

    (31) statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp . SEMI
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    SEMI            shift and go to state 172
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 157

    (34) statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW . type LBRACKET INT RBRACKET SEMI
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    INT             shift and go to state 42
    DOUBLE          shift and go to state 40
    CHAR            shift and go to state 44
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 3

    type                           shift and go to state 173

state 158

    (18) statement -> FOR LPAREN statement exp SEMI exp . RPAREN compoundstmt
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 174
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 159

    (35) statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN . exp RPAREN SEMI
    (42) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (47) exp -> . INT
    (48) exp -> . DOUBLE
    (49) exp -> . IDENTIFIER
    (50) exp -> . IDENTIFIER LBRACKET INT RBRACKET
    (51) exp -> . IDENTIFIER LBRACKET IDENTIFIER RBRACKET
    (52) exp -> . PLUSPLUS IDENTIFIER
    (53) exp -> . MINUSMINUS IDENTIFIER
    (54) exp -> . exp PLUS exp
    (55) exp -> . exp MINUS exp
    (56) exp -> . exp TIMES exp
    (57) exp -> . exp DIVIDE exp
    (58) exp -> . exp GT exp
    (59) exp -> . exp GE exp
    (60) exp -> . exp LT exp
    (61) exp -> . exp LE exp
    (62) exp -> . exp EQ exp
    (63) exp -> . exp NE exp
    (64) exp -> . LPAREN exp PLUS exp RPAREN
    (65) exp -> . LPAREN exp MINUS exp RPAREN
    (66) exp -> . LPAREN exp TIMES exp RPAREN
    (67) exp -> . LPAREN exp DIVIDE exp RPAREN
    (68) exp -> . LPAREN exp GT exp RPAREN
    (69) exp -> . LPAREN exp GE exp RPAREN
    (70) exp -> . LPAREN exp LT exp RPAREN
    (71) exp -> . LPAREN exp LE exp RPAREN
    (72) exp -> . LPAREN exp EQ exp RPAREN
    (73) exp -> . LPAREN exp NE exp RPAREN
    (74) exp -> . CHAR
    (75) exp -> . STRING
    (76) exp -> . BOOLEAN

    IDENTIFIER      shift and go to state 23
    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    PLUSPLUS        shift and go to state 12
    MINUSMINUS      shift and go to state 1
    LPAREN          shift and go to state 13
    CHAR            shift and go to state 24
    STRING          shift and go to state 22
    BOOLEAN         shift and go to state 27

    exp                            shift and go to state 175

state 160

    (4) compoundelem -> LBRACE elements RBRACE .

    PUBLIC          reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    RETURN          reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    FOR             reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    IF              reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    IDENTIFIER      reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    SYSTEM          reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    INT             reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    DOUBLE          reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    PLUSPLUS        reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    MINUSMINUS      reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    LPAREN          reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    CHAR            reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    STRING          reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    BOOLEAN         reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    VOID            reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    $end            reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)
    RBRACE          reduce using rule 4 (compoundelem -> LBRACE elements RBRACE .)


state 161

    (5) elements -> element elements .

    RBRACE          reduce using rule 5 (elements -> element elements .)


state 162

    (9) element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams . RPAREN compoundstmt

    RPAREN          shift and go to state 176


state 163

    (14) params -> type LBRACKET . RBRACKET IDENTIFIER COMMA params
    (16) params -> type LBRACKET . RBRACKET IDENTIFIER

    RBRACKET        shift and go to state 177


state 164

    (13) params -> type IDENTIFIER . COMMA params
    (15) params -> type IDENTIFIER .

    COMMA           shift and go to state 178
    RPAREN          reduce using rule 15 (params -> type IDENTIFIER .)


state 165

    (8) element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN . compoundstmt
    (23) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 127

    compoundstmt                   shift and go to state 179

state 166

    (26) elsestmt -> statement .

    ELSE            reduce using rule 26 (elsestmt -> statement .)
    PUBLIC          reduce using rule 26 (elsestmt -> statement .)
    RETURN          reduce using rule 26 (elsestmt -> statement .)
    FOR             reduce using rule 26 (elsestmt -> statement .)
    IF              reduce using rule 26 (elsestmt -> statement .)
    IDENTIFIER      reduce using rule 26 (elsestmt -> statement .)
    SYSTEM          reduce using rule 26 (elsestmt -> statement .)
    INT             reduce using rule 26 (elsestmt -> statement .)
    DOUBLE          reduce using rule 26 (elsestmt -> statement .)
    PLUSPLUS        reduce using rule 26 (elsestmt -> statement .)
    MINUSMINUS      reduce using rule 26 (elsestmt -> statement .)
    LPAREN          reduce using rule 26 (elsestmt -> statement .)
    CHAR            reduce using rule 26 (elsestmt -> statement .)
    STRING          reduce using rule 26 (elsestmt -> statement .)
    BOOLEAN         reduce using rule 26 (elsestmt -> statement .)
    VOID            reduce using rule 26 (elsestmt -> statement .)
    $end            reduce using rule 26 (elsestmt -> statement .)
    RBRACE          reduce using rule 26 (elsestmt -> statement .)


state 167

    (20) statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .

    RETURN          reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    FOR             reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    IF              reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    IDENTIFIER      reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    SYSTEM          reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    INT             reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    DOUBLE          reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    PLUSPLUS        reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    MINUSMINUS      reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    LPAREN          reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    CHAR            reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    STRING          reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    BOOLEAN         reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    VOID            reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    RBRACE          reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    PUBLIC          reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    $end            reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)
    ELSE            reduce using rule 20 (statement -> IF LPAREN exp RPAREN ifstmt ELSE elsestmt .)


state 168

    (27) elsestmt -> compoundstmt .

    ELSE            reduce using rule 27 (elsestmt -> compoundstmt .)
    PUBLIC          reduce using rule 27 (elsestmt -> compoundstmt .)
    RETURN          reduce using rule 27 (elsestmt -> compoundstmt .)
    FOR             reduce using rule 27 (elsestmt -> compoundstmt .)
    IF              reduce using rule 27 (elsestmt -> compoundstmt .)
    IDENTIFIER      reduce using rule 27 (elsestmt -> compoundstmt .)
    SYSTEM          reduce using rule 27 (elsestmt -> compoundstmt .)
    INT             reduce using rule 27 (elsestmt -> compoundstmt .)
    DOUBLE          reduce using rule 27 (elsestmt -> compoundstmt .)
    PLUSPLUS        reduce using rule 27 (elsestmt -> compoundstmt .)
    MINUSMINUS      reduce using rule 27 (elsestmt -> compoundstmt .)
    LPAREN          reduce using rule 27 (elsestmt -> compoundstmt .)
    CHAR            reduce using rule 27 (elsestmt -> compoundstmt .)
    STRING          reduce using rule 27 (elsestmt -> compoundstmt .)
    BOOLEAN         reduce using rule 27 (elsestmt -> compoundstmt .)
    VOID            reduce using rule 27 (elsestmt -> compoundstmt .)
    $end            reduce using rule 27 (elsestmt -> compoundstmt .)
    RBRACE          reduce using rule 27 (elsestmt -> compoundstmt .)


state 169

    (24) statements -> statement statements .

    RBRACE          reduce using rule 24 (statements -> statement statements .)


state 170

    (23) compoundstmt -> LBRACE statements RBRACE .

    PUBLIC          reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    FOR             reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    IF              reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    SYSTEM          reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    INT             reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    PLUSPLUS        reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    MINUSMINUS      reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    LPAREN          reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    CHAR            reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    STRING          reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    BOOLEAN         reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    VOID            reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    $end            reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 23 (compoundstmt -> LBRACE statements RBRACE .)


state 171

    (30) statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .

    RETURN          reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    FOR             reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    IF              reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    IDENTIFIER      reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    SYSTEM          reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    INT             reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    DOUBLE          reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    PLUSPLUS        reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    MINUSMINUS      reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    LPAREN          reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    CHAR            reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    STRING          reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    BOOLEAN         reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    VOID            reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    RBRACE          reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    PUBLIC          reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    $end            reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)
    ELSE            reduce using rule 30 (statement -> IDENTIFIER LBRACKET INT RBRACKET EQUALS exp SEMI .)


state 172

    (31) statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .

    RETURN          reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    FOR             reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    IF              reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    IDENTIFIER      reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    SYSTEM          reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    INT             reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    DOUBLE          reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    PLUSPLUS        reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    MINUSMINUS      reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    LPAREN          reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    CHAR            reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    STRING          reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    BOOLEAN         reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    VOID            reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    RBRACE          reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    PUBLIC          reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    $end            reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)
    ELSE            reduce using rule 31 (statement -> IDENTIFIER LBRACKET IDENTIFIER RBRACKET EQUALS exp SEMI .)


state 173

    (34) statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type . LBRACKET INT RBRACKET SEMI

    LBRACKET        shift and go to state 180


state 174

    (18) statement -> FOR LPAREN statement exp SEMI exp RPAREN . compoundstmt
    (23) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 127

    compoundstmt                   shift and go to state 181

state 175

    (35) statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp . RPAREN SEMI
    (54) exp -> exp . PLUS exp
    (55) exp -> exp . MINUS exp
    (56) exp -> exp . TIMES exp
    (57) exp -> exp . DIVIDE exp
    (58) exp -> exp . GT exp
    (59) exp -> exp . GE exp
    (60) exp -> exp . LT exp
    (61) exp -> exp . LE exp
    (62) exp -> exp . EQ exp
    (63) exp -> exp . NE exp

    RPAREN          shift and go to state 182
    PLUS            shift and go to state 56
    MINUS           shift and go to state 58
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 50
    GT              shift and go to state 49
    GE              shift and go to state 54
    LT              shift and go to state 52
    LE              shift and go to state 55
    EQ              shift and go to state 57
    NE              shift and go to state 59


state 176

    (9) element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN . compoundstmt
    (23) compoundstmt -> . LBRACE statements RBRACE

    LBRACE          shift and go to state 127

    compoundstmt                   shift and go to state 183

state 177

    (14) params -> type LBRACKET RBRACKET . IDENTIFIER COMMA params
    (16) params -> type LBRACKET RBRACKET . IDENTIFIER

    IDENTIFIER      shift and go to state 184


state 178

    (13) params -> type IDENTIFIER COMMA . params
    (13) params -> . type IDENTIFIER COMMA params
    (14) params -> . type LBRACKET RBRACKET IDENTIFIER COMMA params
    (15) params -> . type IDENTIFIER
    (16) params -> . type LBRACKET RBRACKET IDENTIFIER
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    INT             shift and go to state 42
    DOUBLE          shift and go to state 40
    CHAR            shift and go to state 44
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 3

    params                         shift and go to state 185
    type                           shift and go to state 149

state 179

    (8) element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .

    PUBLIC          reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    RETURN          reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    FOR             reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IF              reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IDENTIFIER      reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    SYSTEM          reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    INT             reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    DOUBLE          reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    PLUSPLUS        reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    MINUSMINUS      reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    LPAREN          reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    CHAR            reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    STRING          reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    BOOLEAN         reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    VOID            reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    RBRACE          reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    $end            reduce using rule 8 (element -> PUBLIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)


state 180

    (34) statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET . INT RBRACKET SEMI

    INT             shift and go to state 186


state 181

    (18) statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .

    RETURN          reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    FOR             reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    IF              reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    IDENTIFIER      reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    SYSTEM          reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    INT             reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    DOUBLE          reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    PLUSPLUS        reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    MINUSMINUS      reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    LPAREN          reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    CHAR            reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    STRING          reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    BOOLEAN         reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    VOID            reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    RBRACE          reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    PUBLIC          reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    $end            reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)
    ELSE            reduce using rule 18 (statement -> FOR LPAREN statement exp SEMI exp RPAREN compoundstmt .)


state 182

    (35) statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN . SEMI

    SEMI            shift and go to state 187


state 183

    (9) element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .

    PUBLIC          reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    RETURN          reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    FOR             reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IF              reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IDENTIFIER      reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    SYSTEM          reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    INT             reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    DOUBLE          reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    PLUSPLUS        reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    MINUSMINUS      reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    LPAREN          reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    CHAR            reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    STRING          reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    BOOLEAN         reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    VOID            reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    RBRACE          reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    $end            reduce using rule 9 (element -> PUBLIC STATIC return_type IDENTIFIER LPAREN optparams RPAREN compoundstmt .)


state 184

    (14) params -> type LBRACKET RBRACKET IDENTIFIER . COMMA params
    (16) params -> type LBRACKET RBRACKET IDENTIFIER .

    COMMA           shift and go to state 188
    RPAREN          reduce using rule 16 (params -> type LBRACKET RBRACKET IDENTIFIER .)


state 185

    (13) params -> type IDENTIFIER COMMA params .

    RPAREN          reduce using rule 13 (params -> type IDENTIFIER COMMA params .)


state 186

    (34) statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT . RBRACKET SEMI

    RBRACKET        shift and go to state 189


state 187

    (35) statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .

    RETURN          reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    FOR             reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    IF              reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    IDENTIFIER      reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    SYSTEM          reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    INT             reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    DOUBLE          reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    PLUSPLUS        reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    MINUSMINUS      reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    LPAREN          reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    CHAR            reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    STRING          reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    BOOLEAN         reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    VOID            reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    RBRACE          reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    PUBLIC          reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    $end            reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)
    ELSE            reduce using rule 35 (statement -> SYSTEM PERIOD OUT PERIOD PRINTLN LPAREN exp RPAREN SEMI .)


state 188

    (14) params -> type LBRACKET RBRACKET IDENTIFIER COMMA . params
    (13) params -> . type IDENTIFIER COMMA params
    (14) params -> . type LBRACKET RBRACKET IDENTIFIER COMMA params
    (15) params -> . type IDENTIFIER
    (16) params -> . type LBRACKET RBRACKET IDENTIFIER
    (36) type -> . INT
    (37) type -> . DOUBLE
    (38) type -> . CHAR
    (39) type -> . STRING
    (40) type -> . BOOLEAN
    (41) type -> . VOID

    INT             shift and go to state 42
    DOUBLE          shift and go to state 40
    CHAR            shift and go to state 44
    STRING          shift and go to state 41
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 3

    params                         shift and go to state 190
    type                           shift and go to state 149

state 189

    (34) statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET . SEMI

    SEMI            shift and go to state 191


state 190

    (14) params -> type LBRACKET RBRACKET IDENTIFIER COMMA params .

    RPAREN          reduce using rule 14 (params -> type LBRACKET RBRACKET IDENTIFIER COMMA params .)


state 191

    (34) statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .

    RETURN          reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    FOR             reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    IF              reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    IDENTIFIER      reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    SYSTEM          reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    INT             reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    DOUBLE          reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    PLUSPLUS        reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    MINUSMINUS      reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    LPAREN          reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    CHAR            reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    STRING          reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    BOOLEAN         reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    VOID            reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    RBRACE          reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    PUBLIC          reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    $end            reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)
    ELSE            reduce using rule 34 (statement -> type LBRACKET RBRACKET IDENTIFIER EQUALS NEW type LBRACKET INT RBRACKET SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 125 resolved as shift
